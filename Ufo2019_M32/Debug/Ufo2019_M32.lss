
Ufo2019_M32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000019dc  00001a90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019dc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000066  0080013c  0080013c  00001acc  2**0
                  ALLOC
  3 .eeprom       00000005  00810000  00810000  00001acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00001ad1  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b30  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000003c8  00000000  00000000  00001b70  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004b68  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000fd9  00000000  00000000  00006aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001b4d  00000000  00000000  00007a79  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000830  00000000  00000000  000095c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000166c  00000000  00000000  00009df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002d35  00000000  00000000  0000b464  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000370  00000000  00000000  0000e199  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__vector_9>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 92 06 	jmp	0xd24	; 0xd24 <__vector_16>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__vector_18>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      68:	e7 00       	.word	0x00e7	; ????
      6a:	01 01       	movw	r0, r2
      6c:	26 01       	movw	r4, r12
      6e:	b2 00       	.word	0x00b2	; ????
      70:	26 01       	movw	r4, r12
      72:	bd 00       	.word	0x00bd	; ????
      74:	1b 01       	movw	r2, r22
      76:	31 01       	movw	r6, r2
      78:	26 01       	movw	r4, r12
      7a:	26 01       	movw	r4, r12
      7c:	26 01       	movw	r4, r12
      7e:	26 01       	movw	r4, r12
      80:	26 01       	movw	r4, r12
      82:	26 01       	movw	r4, r12
      84:	26 01       	movw	r4, r12
      86:	26 01       	movw	r4, r12
      88:	31 01       	movw	r6, r2
      8a:	26 01       	movw	r4, r12
      8c:	26 01       	movw	r4, r12
      8e:	26 01       	movw	r4, r12
      90:	26 01       	movw	r4, r12
      92:	26 01       	movw	r4, r12

00000094 <__ctors_start>:
      94:	cb 08       	sbc	r12, r11

00000096 <__ctors_end>:
      96:	11 24       	eor	r1, r1
      98:	1f be       	out	0x3f, r1	; 63
      9a:	cf ef       	ldi	r28, 0xFF	; 255
      9c:	d8 e0       	ldi	r29, 0x08	; 8
      9e:	de bf       	out	0x3e, r29	; 62
      a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
      a2:	11 e0       	ldi	r17, 0x01	; 1
      a4:	a0 e0       	ldi	r26, 0x00	; 0
      a6:	b1 e0       	ldi	r27, 0x01	; 1
      a8:	ec ed       	ldi	r30, 0xDC	; 220
      aa:	f9 e1       	ldi	r31, 0x19	; 25
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <__do_copy_data+0x10>
      ae:	05 90       	lpm	r0, Z+
      b0:	0d 92       	st	X+, r0
      b2:	ac 33       	cpi	r26, 0x3C	; 60
      b4:	b1 07       	cpc	r27, r17
      b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0xc>

000000b8 <__do_clear_bss>:
      b8:	21 e0       	ldi	r18, 0x01	; 1
      ba:	ac e3       	ldi	r26, 0x3C	; 60
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	a2 3a       	cpi	r26, 0xA2	; 162
      c4:	b2 07       	cpc	r27, r18
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>

000000c8 <__do_global_ctors>:
      c8:	10 e0       	ldi	r17, 0x00	; 0
      ca:	cb e4       	ldi	r28, 0x4B	; 75
      cc:	d0 e0       	ldi	r29, 0x00	; 0
      ce:	04 c0       	rjmp	.+8      	; 0xd8 <__do_global_ctors+0x10>
      d0:	21 97       	sbiw	r28, 0x01	; 1
      d2:	fe 01       	movw	r30, r28
      d4:	0e 94 1e 09 	call	0x123c	; 0x123c <__tablejump2__>
      d8:	ca 34       	cpi	r28, 0x4A	; 74
      da:	d1 07       	cpc	r29, r17
      dc:	c9 f7       	brne	.-14     	; 0xd0 <__do_global_ctors+0x8>
      de:	0e 94 f6 06 	call	0xdec	; 0xdec <main>
      e2:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_ZN19DFRobotDFPlayerMini10setTimeOutEm>:
    }
  }
  else{
    return -1;
  }
}
      ea:	fc 01       	movw	r30, r24
      ec:	44 83       	std	Z+4, r20	; 0x04
      ee:	55 83       	std	Z+5, r21	; 0x05
      f0:	66 83       	std	Z+6, r22	; 0x06
      f2:	77 83       	std	Z+7, r23	; 0x07
      f4:	08 95       	ret

000000f6 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>:
      f6:	fb 01       	movw	r30, r22
      f8:	31 96       	adiw	r30, 0x01	; 1
      fa:	69 5f       	subi	r22, 0xF9	; 249
      fc:	7f 4f       	sbci	r23, 0xFF	; 255
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	21 91       	ld	r18, Z+
     104:	82 0f       	add	r24, r18
     106:	91 1d       	adc	r25, r1
     108:	e6 17       	cp	r30, r22
     10a:	f7 07       	cpc	r31, r23
     10c:	d1 f7       	brne	.-12     	; 0x102 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh+0xc>
     10e:	91 95       	neg	r25
     110:	81 95       	neg	r24
     112:	91 09       	sbc	r25, r1
     114:	08 95       	ret

00000116 <_ZN19DFRobotDFPlayerMini10parseStackEv>:
     116:	dc 01       	movw	r26, r24
     118:	1b 96       	adiw	r26, 0x0b	; 11
     11a:	ec 91       	ld	r30, X
     11c:	1b 97       	sbiw	r26, 0x0b	; 11
     11e:	e1 34       	cpi	r30, 0x41	; 65
     120:	19 f4       	brne	.+6      	; 0x128 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x12>
     122:	93 96       	adiw	r26, 0x23	; 35
     124:	1c 92       	st	X, r1
     126:	08 95       	ret
     128:	5f 96       	adiw	r26, 0x1f	; 31
     12a:	ec 93       	st	X, r30
     12c:	5f 97       	sbiw	r26, 0x1f	; 31
     12e:	1d 96       	adiw	r26, 0x0d	; 13
     130:	8c 91       	ld	r24, X
     132:	1d 97       	sbiw	r26, 0x0d	; 13
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	98 2f       	mov	r25, r24
     138:	88 27       	eor	r24, r24
     13a:	1e 96       	adiw	r26, 0x0e	; 14
     13c:	2c 91       	ld	r18, X
     13e:	1e 97       	sbiw	r26, 0x0e	; 14
     140:	82 0f       	add	r24, r18
     142:	91 1d       	adc	r25, r1
     144:	91 96       	adiw	r26, 0x21	; 33
     146:	9c 93       	st	X, r25
     148:	8e 93       	st	-X, r24
     14a:	90 97       	sbiw	r26, 0x20	; 32
     14c:	4e 2f       	mov	r20, r30
     14e:	50 e0       	ldi	r21, 0x00	; 0
     150:	fa 01       	movw	r30, r20
     152:	fa 97       	sbiw	r30, 0x3a	; 58
     154:	e6 31       	cpi	r30, 0x16	; 22
     156:	f1 05       	cpc	r31, r1
     158:	08 f0       	brcs	.+2      	; 0x15c <_ZN19DFRobotDFPlayerMini10parseStackEv+0x46>
     15a:	83 c0       	rjmp	.+262    	; 0x262 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x14c>
     15c:	ec 5c       	subi	r30, 0xCC	; 204
     15e:	ff 4f       	sbci	r31, 0xFF	; 255
     160:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__tablejump2__>
     164:	5c 96       	adiw	r26, 0x1c	; 28
     166:	1c 92       	st	X, r1
     168:	5c 97       	sbiw	r26, 0x1c	; 28
     16a:	85 e0       	ldi	r24, 0x05	; 5
     16c:	5e 96       	adiw	r26, 0x1e	; 30
     16e:	8c 93       	st	X, r24
     170:	5e 97       	sbiw	r26, 0x1e	; 30
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	92 96       	adiw	r26, 0x22	; 34
     176:	8c 93       	st	X, r24
     178:	08 95       	ret
     17a:	80 ff       	sbrs	r24, 0
     17c:	0b c0       	rjmp	.+22     	; 0x194 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x7e>
     17e:	5c 96       	adiw	r26, 0x1c	; 28
     180:	1c 92       	st	X, r1
     182:	5c 97       	sbiw	r26, 0x1c	; 28
     184:	89 e0       	ldi	r24, 0x09	; 9
     186:	5e 96       	adiw	r26, 0x1e	; 30
     188:	8c 93       	st	X, r24
     18a:	5e 97       	sbiw	r26, 0x1e	; 30
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	92 96       	adiw	r26, 0x22	; 34
     190:	8c 93       	st	X, r24
     192:	08 95       	ret
     194:	81 ff       	sbrs	r24, 1
     196:	0b c0       	rjmp	.+22     	; 0x1ae <_ZN19DFRobotDFPlayerMini10parseStackEv+0x98>
     198:	5c 96       	adiw	r26, 0x1c	; 28
     19a:	1c 92       	st	X, r1
     19c:	5c 97       	sbiw	r26, 0x1c	; 28
     19e:	84 e0       	ldi	r24, 0x04	; 4
     1a0:	5e 96       	adiw	r26, 0x1e	; 30
     1a2:	8c 93       	st	X, r24
     1a4:	5e 97       	sbiw	r26, 0x1e	; 30
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	92 96       	adiw	r26, 0x22	; 34
     1aa:	8c 93       	st	X, r24
     1ac:	08 95       	ret
     1ae:	83 70       	andi	r24, 0x03	; 3
     1b0:	99 27       	eor	r25, r25
     1b2:	89 2b       	or	r24, r25
     1b4:	09 f4       	brne	.+2      	; 0x1b8 <_ZN19DFRobotDFPlayerMini10parseStackEv+0xa2>
     1b6:	65 c0       	rjmp	.+202    	; 0x282 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x16c>
     1b8:	5c 96       	adiw	r26, 0x1c	; 28
     1ba:	1c 92       	st	X, r1
     1bc:	5c 97       	sbiw	r26, 0x1c	; 28
     1be:	8a e0       	ldi	r24, 0x0A	; 10
     1c0:	5e 96       	adiw	r26, 0x1e	; 30
     1c2:	8c 93       	st	X, r24
     1c4:	5e 97       	sbiw	r26, 0x1e	; 30
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	92 96       	adiw	r26, 0x22	; 34
     1ca:	8c 93       	st	X, r24
     1cc:	08 95       	ret
     1ce:	80 ff       	sbrs	r24, 0
     1d0:	0b c0       	rjmp	.+22     	; 0x1e8 <_ZN19DFRobotDFPlayerMini10parseStackEv+0xd2>
     1d2:	5c 96       	adiw	r26, 0x1c	; 28
     1d4:	1c 92       	st	X, r1
     1d6:	5c 97       	sbiw	r26, 0x1c	; 28
     1d8:	87 e0       	ldi	r24, 0x07	; 7
     1da:	5e 96       	adiw	r26, 0x1e	; 30
     1dc:	8c 93       	st	X, r24
     1de:	5e 97       	sbiw	r26, 0x1e	; 30
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	92 96       	adiw	r26, 0x22	; 34
     1e4:	8c 93       	st	X, r24
     1e6:	08 95       	ret
     1e8:	81 ff       	sbrs	r24, 1
     1ea:	4b c0       	rjmp	.+150    	; 0x282 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x16c>
     1ec:	5c 96       	adiw	r26, 0x1c	; 28
     1ee:	1c 92       	st	X, r1
     1f0:	5c 97       	sbiw	r26, 0x1c	; 28
     1f2:	82 e0       	ldi	r24, 0x02	; 2
     1f4:	5e 96       	adiw	r26, 0x1e	; 30
     1f6:	8c 93       	st	X, r24
     1f8:	5e 97       	sbiw	r26, 0x1e	; 30
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	92 96       	adiw	r26, 0x22	; 34
     1fe:	8c 93       	st	X, r24
     200:	08 95       	ret
     202:	80 ff       	sbrs	r24, 0
     204:	0b c0       	rjmp	.+22     	; 0x21c <_ZN19DFRobotDFPlayerMini10parseStackEv+0x106>
     206:	5c 96       	adiw	r26, 0x1c	; 28
     208:	1c 92       	st	X, r1
     20a:	5c 97       	sbiw	r26, 0x1c	; 28
     20c:	88 e0       	ldi	r24, 0x08	; 8
     20e:	5e 96       	adiw	r26, 0x1e	; 30
     210:	8c 93       	st	X, r24
     212:	5e 97       	sbiw	r26, 0x1e	; 30
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	92 96       	adiw	r26, 0x22	; 34
     218:	8c 93       	st	X, r24
     21a:	08 95       	ret
     21c:	81 ff       	sbrs	r24, 1
     21e:	31 c0       	rjmp	.+98     	; 0x282 <_ZN19DFRobotDFPlayerMini10parseStackEv+0x16c>
     220:	5c 96       	adiw	r26, 0x1c	; 28
     222:	1c 92       	st	X, r1
     224:	5c 97       	sbiw	r26, 0x1c	; 28
     226:	83 e0       	ldi	r24, 0x03	; 3
     228:	5e 96       	adiw	r26, 0x1e	; 30
     22a:	8c 93       	st	X, r24
     22c:	5e 97       	sbiw	r26, 0x1e	; 30
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	92 96       	adiw	r26, 0x22	; 34
     232:	8c 93       	st	X, r24
     234:	08 95       	ret
     236:	5c 96       	adiw	r26, 0x1c	; 28
     238:	1c 92       	st	X, r1
     23a:	5c 97       	sbiw	r26, 0x1c	; 28
     23c:	86 e0       	ldi	r24, 0x06	; 6
     23e:	5e 96       	adiw	r26, 0x1e	; 30
     240:	8c 93       	st	X, r24
     242:	5e 97       	sbiw	r26, 0x1e	; 30
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	92 96       	adiw	r26, 0x22	; 34
     248:	8c 93       	st	X, r24
     24a:	08 95       	ret
     24c:	5c 96       	adiw	r26, 0x1c	; 28
     24e:	1c 92       	st	X, r1
     250:	5c 97       	sbiw	r26, 0x1c	; 28
     252:	8b e0       	ldi	r24, 0x0B	; 11
     254:	5e 96       	adiw	r26, 0x1e	; 30
     256:	8c 93       	st	X, r24
     258:	5e 97       	sbiw	r26, 0x1e	; 30
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	92 96       	adiw	r26, 0x22	; 34
     25e:	8c 93       	st	X, r24
     260:	08 95       	ret
     262:	5c 96       	adiw	r26, 0x1c	; 28
     264:	1c 92       	st	X, r1
     266:	5c 97       	sbiw	r26, 0x1c	; 28
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	5e 96       	adiw	r26, 0x1e	; 30
     26c:	8c 93       	st	X, r24
     26e:	5e 97       	sbiw	r26, 0x1e	; 30
     270:	91 96       	adiw	r26, 0x21	; 33
     272:	1c 92       	st	X, r1
     274:	1e 92       	st	-X, r1
     276:	90 97       	sbiw	r26, 0x20	; 32
     278:	92 96       	adiw	r26, 0x22	; 34
     27a:	8c 93       	st	X, r24
     27c:	92 97       	sbiw	r26, 0x22	; 34
     27e:	93 96       	adiw	r26, 0x23	; 35
     280:	1c 92       	st	X, r1
     282:	08 95       	ret

00000284 <_ZN19DFRobotDFPlayerMini13validateStackEv>:
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	ec 01       	movw	r28, r24
     28a:	bc 01       	movw	r22, r24
     28c:	68 5f       	subi	r22, 0xF8	; 248
     28e:	7f 4f       	sbci	r23, 0xFF	; 255
     290:	0e 94 7b 00 	call	0xf6	; 0xf6 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>
     294:	2f 85       	ldd	r18, Y+15	; 0x0f
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	32 2f       	mov	r19, r18
     29a:	22 27       	eor	r18, r18
     29c:	48 89       	ldd	r20, Y+16	; 0x10
     29e:	24 0f       	add	r18, r20
     2a0:	31 1d       	adc	r19, r1
     2a2:	41 e0       	ldi	r20, 0x01	; 1
     2a4:	28 17       	cp	r18, r24
     2a6:	39 07       	cpc	r19, r25
     2a8:	09 f0       	breq	.+2      	; 0x2ac <_ZN19DFRobotDFPlayerMini13validateStackEv+0x28>
     2aa:	40 e0       	ldi	r20, 0x00	; 0
     2ac:	84 2f       	mov	r24, r20
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	08 95       	ret

000002b4 <_ZN19DFRobotDFPlayerMini9availableEv>:
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	ec 01       	movw	r28, r24
     2bc:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_Z16sc16is_availablev>
     2c0:	88 23       	and	r24, r24
     2c2:	09 f4       	brne	.+2      	; 0x2c6 <_ZN19DFRobotDFPlayerMini9availableEv+0x12>
     2c4:	52 c0       	rjmp	.+164    	; 0x36a <_ZN19DFRobotDFPlayerMini9availableEv+0xb6>
     2c6:	1c 8d       	ldd	r17, Y+28	; 0x1c
     2c8:	11 11       	cpse	r17, r1
     2ca:	09 c0       	rjmp	.+18     	; 0x2de <_ZN19DFRobotDFPlayerMini9availableEv+0x2a>
     2cc:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_Z16sc16is_uart_readv>
     2d0:	88 87       	std	Y+8, r24	; 0x08
     2d2:	8e 37       	cpi	r24, 0x7E	; 126
     2d4:	99 f7       	brne	.-26     	; 0x2bc <_ZN19DFRobotDFPlayerMini9availableEv+0x8>
     2d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     2d8:	8f 5f       	subi	r24, 0xFF	; 255
     2da:	8c 8f       	std	Y+28, r24	; 0x1c
     2dc:	ef cf       	rjmp	.-34     	; 0x2bc <_ZN19DFRobotDFPlayerMini9availableEv+0x8>
     2de:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_Z16sc16is_uart_readv>
     2e2:	fe 01       	movw	r30, r28
     2e4:	e1 0f       	add	r30, r17
     2e6:	f1 1d       	adc	r31, r1
     2e8:	80 87       	std	Z+8, r24	; 0x08
     2ea:	8c 8d       	ldd	r24, Y+28	; 0x1c
     2ec:	82 30       	cpi	r24, 0x02	; 2
     2ee:	79 f0       	breq	.+30     	; 0x30e <_ZN19DFRobotDFPlayerMini9availableEv+0x5a>
     2f0:	89 30       	cpi	r24, 0x09	; 9
     2f2:	c9 f0       	breq	.+50     	; 0x326 <_ZN19DFRobotDFPlayerMini9availableEv+0x72>
     2f4:	81 30       	cpi	r24, 0x01	; 1
     2f6:	b1 f5       	brne	.+108    	; 0x364 <_ZN19DFRobotDFPlayerMini9availableEv+0xb0>
     2f8:	99 85       	ldd	r25, Y+9	; 0x09
     2fa:	9f 3f       	cpi	r25, 0xFF	; 255
     2fc:	99 f1       	breq	.+102    	; 0x364 <_ZN19DFRobotDFPlayerMini9availableEv+0xb0>
     2fe:	1c 8e       	std	Y+28, r1	; 0x1c
     300:	8e 8f       	std	Y+30, r24	; 0x1e
     302:	19 a2       	std	Y+33, r1	; 0x21
     304:	18 a2       	std	Y+32, r1	; 0x20
     306:	8a a3       	std	Y+34, r24	; 0x22
     308:	1b a2       	std	Y+35, r1	; 0x23
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	2f c0       	rjmp	.+94     	; 0x36c <_ZN19DFRobotDFPlayerMini9availableEv+0xb8>
     30e:	9a 85       	ldd	r25, Y+10	; 0x0a
     310:	96 30       	cpi	r25, 0x06	; 6
     312:	41 f1       	breq	.+80     	; 0x364 <_ZN19DFRobotDFPlayerMini9availableEv+0xb0>
     314:	1c 8e       	std	Y+28, r1	; 0x1c
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	8e 8f       	std	Y+30, r24	; 0x1e
     31a:	19 a2       	std	Y+33, r1	; 0x21
     31c:	18 a2       	std	Y+32, r1	; 0x20
     31e:	8a a3       	std	Y+34, r24	; 0x22
     320:	1b a2       	std	Y+35, r1	; 0x23
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	23 c0       	rjmp	.+70     	; 0x36c <_ZN19DFRobotDFPlayerMini9availableEv+0xb8>
     326:	89 89       	ldd	r24, Y+17	; 0x11
     328:	8f 3e       	cpi	r24, 0xEF	; 239
     32a:	49 f0       	breq	.+18     	; 0x33e <_ZN19DFRobotDFPlayerMini9availableEv+0x8a>
     32c:	1c 8e       	std	Y+28, r1	; 0x1c
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	8e 8f       	std	Y+30, r24	; 0x1e
     332:	19 a2       	std	Y+33, r1	; 0x21
     334:	18 a2       	std	Y+32, r1	; 0x20
     336:	8a a3       	std	Y+34, r24	; 0x22
     338:	1b a2       	std	Y+35, r1	; 0x23
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	17 c0       	rjmp	.+46     	; 0x36c <_ZN19DFRobotDFPlayerMini9availableEv+0xb8>
     33e:	ce 01       	movw	r24, r28
     340:	0e 94 42 01 	call	0x284	; 0x284 <_ZN19DFRobotDFPlayerMini13validateStackEv>
     344:	88 23       	and	r24, r24
     346:	31 f0       	breq	.+12     	; 0x354 <_ZN19DFRobotDFPlayerMini9availableEv+0xa0>
     348:	1c 8e       	std	Y+28, r1	; 0x1c
     34a:	ce 01       	movw	r24, r28
     34c:	0e 94 8b 00 	call	0x116	; 0x116 <_ZN19DFRobotDFPlayerMini10parseStackEv>
     350:	8a a1       	ldd	r24, Y+34	; 0x22
     352:	0c c0       	rjmp	.+24     	; 0x36c <_ZN19DFRobotDFPlayerMini9availableEv+0xb8>
     354:	1c 8e       	std	Y+28, r1	; 0x1c
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	9e 8f       	std	Y+30, r25	; 0x1e
     35a:	19 a2       	std	Y+33, r1	; 0x21
     35c:	18 a2       	std	Y+32, r1	; 0x20
     35e:	9a a3       	std	Y+34, r25	; 0x22
     360:	1b a2       	std	Y+35, r1	; 0x23
     362:	04 c0       	rjmp	.+8      	; 0x36c <_ZN19DFRobotDFPlayerMini9availableEv+0xb8>
     364:	8f 5f       	subi	r24, 0xFF	; 255
     366:	8c 8f       	std	Y+28, r24	; 0x1c
     368:	a9 cf       	rjmp	.-174    	; 0x2bc <_ZN19DFRobotDFPlayerMini9availableEv+0x8>
     36a:	8a a1       	ldd	r24, Y+34	; 0x22
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	1f 91       	pop	r17
     372:	08 95       	ret

00000374 <_ZN19DFRobotDFPlayerMini9sendStackEv>:
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	ec 01       	movw	r28, r24
     37a:	8e 89       	ldd	r24, Y+22	; 0x16
     37c:	88 23       	and	r24, r24
     37e:	49 f0       	breq	.+18     	; 0x392 <_ZN19DFRobotDFPlayerMini9sendStackEv+0x1e>
     380:	8b a1       	ldd	r24, Y+35	; 0x23
     382:	88 23       	and	r24, r24
     384:	31 f0       	breq	.+12     	; 0x392 <_ZN19DFRobotDFPlayerMini9sendStackEv+0x1e>
     386:	ce 01       	movw	r24, r28
     388:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <_ZN19DFRobotDFPlayerMini9availableEv>
     38c:	8b a1       	ldd	r24, Y+35	; 0x23
     38e:	81 11       	cpse	r24, r1
     390:	fa cf       	rjmp	.-12     	; 0x386 <_ZN19DFRobotDFPlayerMini9sendStackEv+0x12>
     392:	6a e0       	ldi	r22, 0x0A	; 10
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	ce 01       	movw	r24, r28
     398:	42 96       	adiw	r24, 0x12	; 18
     39a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_Z21sc16is_uart_write_bufPhi>
     39e:	8e 89       	ldd	r24, Y+22	; 0x16
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	81 11       	cpse	r24, r1
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <_ZN19DFRobotDFPlayerMini9sendStackEv+0x34>
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	9b a3       	std	Y+35, r25	; 0x23
     3aa:	81 11       	cpse	r24, r1
     3ac:	06 c0       	rjmp	.+12     	; 0x3ba <_ZN19DFRobotDFPlayerMini9sendStackEv+0x46>
     3ae:	8f e3       	ldi	r24, 0x3F	; 63
     3b0:	9c e9       	ldi	r25, 0x9C	; 156
     3b2:	01 97       	sbiw	r24, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <_ZN19DFRobotDFPlayerMini9sendStackEv+0x3e>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <_ZN19DFRobotDFPlayerMini9sendStackEv+0x44>
     3b8:	00 00       	nop
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	08 95       	ret

000003c0 <_ZN19DFRobotDFPlayerMini9sendStackEhj>:
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	ec 01       	movw	r28, r24
     3c6:	6d 8b       	std	Y+21, r22	; 0x15
     3c8:	5f 8b       	std	Y+23, r21	; 0x17
     3ca:	48 8f       	std	Y+24, r20	; 0x18
     3cc:	bc 01       	movw	r22, r24
     3ce:	6e 5e       	subi	r22, 0xEE	; 238
     3d0:	7f 4f       	sbci	r23, 0xFF	; 255
     3d2:	0e 94 7b 00 	call	0xf6	; 0xf6 <_ZN19DFRobotDFPlayerMini17calculateCheckSumEPh>
     3d6:	99 8f       	std	Y+25, r25	; 0x19
     3d8:	8a 8f       	std	Y+26, r24	; 0x1a
     3da:	ce 01       	movw	r24, r28
     3dc:	0e 94 ba 01 	call	0x374	; 0x374 <_ZN19DFRobotDFPlayerMini9sendStackEv>
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <_ZN19DFRobotDFPlayerMini9sendStackEh>:
     3e6:	40 e0       	ldi	r20, 0x00	; 0
     3e8:	50 e0       	ldi	r21, 0x00	; 0
     3ea:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_ZN19DFRobotDFPlayerMini9sendStackEhj>
     3ee:	08 95       	ret

000003f0 <_ZN19DFRobotDFPlayerMini13waitAvailableEm>:
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	ec 01       	movw	r28, r24
     3f6:	ce 01       	movw	r24, r28
     3f8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <_ZN19DFRobotDFPlayerMini9availableEv>
     3fc:	88 23       	and	r24, r24
     3fe:	d9 f3       	breq	.-10     	; 0x3f6 <_ZN19DFRobotDFPlayerMini13waitAvailableEm+0x6>
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	08 95       	ret

00000408 <_ZN19DFRobotDFPlayerMini4playEi>:
     408:	ab 01       	movw	r20, r22
     40a:	63 e0       	ldi	r22, 0x03	; 3
     40c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_ZN19DFRobotDFPlayerMini9sendStackEhj>
     410:	08 95       	ret

00000412 <_ZN19DFRobotDFPlayerMini6volumeEh>:
     412:	46 2f       	mov	r20, r22
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	66 e0       	ldi	r22, 0x06	; 6
     418:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_ZN19DFRobotDFPlayerMini9sendStackEhj>
     41c:	08 95       	ret

0000041e <_ZN19DFRobotDFPlayerMini2EQEh>:
     41e:	46 2f       	mov	r20, r22
     420:	50 e0       	ldi	r21, 0x00	; 0
     422:	67 e0       	ldi	r22, 0x07	; 7
     424:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_ZN19DFRobotDFPlayerMini9sendStackEhj>
     428:	08 95       	ret

0000042a <_ZN19DFRobotDFPlayerMini12outputDeviceEh>:
     42a:	46 2f       	mov	r20, r22
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	69 e0       	ldi	r22, 0x09	; 9
     430:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_ZN19DFRobotDFPlayerMini9sendStackEhj>
     434:	2f ef       	ldi	r18, 0xFF	; 255
     436:	83 ec       	ldi	r24, 0xC3	; 195
     438:	99 e0       	ldi	r25, 0x09	; 9
     43a:	21 50       	subi	r18, 0x01	; 1
     43c:	80 40       	sbci	r24, 0x00	; 0
     43e:	90 40       	sbci	r25, 0x00	; 0
     440:	e1 f7       	brne	.-8      	; 0x43a <_ZN19DFRobotDFPlayerMini12outputDeviceEh+0x10>
     442:	00 c0       	rjmp	.+0      	; 0x444 <_ZN19DFRobotDFPlayerMini12outputDeviceEh+0x1a>
     444:	00 00       	nop
     446:	08 95       	ret

00000448 <_ZN19DFRobotDFPlayerMini5resetEv>:
     448:	6c e0       	ldi	r22, 0x0C	; 12
     44a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN19DFRobotDFPlayerMini9sendStackEh>
     44e:	08 95       	ret

00000450 <_ZN19DFRobotDFPlayerMini5beginEbb>:
     450:	0f 93       	push	r16
     452:	1f 93       	push	r17
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	ec 01       	movw	r28, r24
     45a:	16 2f       	mov	r17, r22
     45c:	04 2f       	mov	r16, r20
     45e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z8twi_initv>
     462:	80 e9       	ldi	r24, 0x90	; 144
     464:	0e 94 81 03 	call	0x702	; 0x702 <_Z15sc16is_set_addrh>
     468:	60 e8       	ldi	r22, 0x80	; 128
     46a:	75 e2       	ldi	r23, 0x25	; 37
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 bb 04 	call	0x976	; 0x976 <_Z11sc16is_initm>
     474:	11 23       	and	r17, r17
     476:	19 f0       	breq	.+6      	; 0x47e <_ZN19DFRobotDFPlayerMini5beginEbb+0x2e>
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	8e 8b       	std	Y+22, r24	; 0x16
     47c:	01 c0       	rjmp	.+2      	; 0x480 <_ZN19DFRobotDFPlayerMini5beginEbb+0x30>
     47e:	1e 8a       	std	Y+22, r1	; 0x16
     480:	00 23       	and	r16, r16
     482:	a1 f0       	breq	.+40     	; 0x4ac <_ZN19DFRobotDFPlayerMini5beginEbb+0x5c>
     484:	ce 01       	movw	r24, r28
     486:	0e 94 24 02 	call	0x448	; 0x448 <_ZN19DFRobotDFPlayerMini5resetEv>
     48a:	40 ed       	ldi	r20, 0xD0	; 208
     48c:	57 e0       	ldi	r21, 0x07	; 7
     48e:	60 e0       	ldi	r22, 0x00	; 0
     490:	70 e0       	ldi	r23, 0x00	; 0
     492:	ce 01       	movw	r24, r28
     494:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_ZN19DFRobotDFPlayerMini13waitAvailableEm>
     498:	2f ef       	ldi	r18, 0xFF	; 255
     49a:	83 ec       	ldi	r24, 0xC3	; 195
     49c:	99 e0       	ldi	r25, 0x09	; 9
     49e:	21 50       	subi	r18, 0x01	; 1
     4a0:	80 40       	sbci	r24, 0x00	; 0
     4a2:	90 40       	sbci	r25, 0x00	; 0
     4a4:	e1 f7       	brne	.-8      	; 0x49e <_ZN19DFRobotDFPlayerMini5beginEbb+0x4e>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <_ZN19DFRobotDFPlayerMini5beginEbb+0x58>
     4a8:	00 00       	nop
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <_ZN19DFRobotDFPlayerMini5beginEbb+0x60>
     4ac:	84 e0       	ldi	r24, 0x04	; 4
     4ae:	8e 8f       	std	Y+30, r24	; 0x1e
     4b0:	1a a2       	std	Y+34, r1	; 0x22
     4b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     4b4:	84 30       	cpi	r24, 0x04	; 4
     4b6:	29 f0       	breq	.+10     	; 0x4c2 <_ZN19DFRobotDFPlayerMini5beginEbb+0x72>
     4b8:	89 30       	cpi	r24, 0x09	; 9
     4ba:	29 f0       	breq	.+10     	; 0x4c6 <_ZN19DFRobotDFPlayerMini5beginEbb+0x76>
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	81 27       	eor	r24, r17
     4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <_ZN19DFRobotDFPlayerMini5beginEbb+0x78>
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <_ZN19DFRobotDFPlayerMini5beginEbb+0x78>
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	df 91       	pop	r29
     4ca:	cf 91       	pop	r28
     4cc:	1f 91       	pop	r17
     4ce:	0f 91       	pop	r16
     4d0:	08 95       	ret

000004d2 <_ZN19DFRobotDFPlayerMini9readStateEv>:
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	ec 01       	movw	r28, r24
     4d8:	62 e4       	ldi	r22, 0x42	; 66
     4da:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN19DFRobotDFPlayerMini9sendStackEh>
     4de:	40 e0       	ldi	r20, 0x00	; 0
     4e0:	50 e0       	ldi	r21, 0x00	; 0
     4e2:	ba 01       	movw	r22, r20
     4e4:	ce 01       	movw	r24, r28
     4e6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_ZN19DFRobotDFPlayerMini13waitAvailableEm>
     4ea:	88 23       	and	r24, r24
     4ec:	39 f0       	breq	.+14     	; 0x4fc <_ZN19DFRobotDFPlayerMini9readStateEv+0x2a>
     4ee:	1a a2       	std	Y+34, r1	; 0x22
     4f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     4f2:	8b 30       	cpi	r24, 0x0B	; 11
     4f4:	31 f4       	brne	.+12     	; 0x502 <_ZN19DFRobotDFPlayerMini9readStateEv+0x30>
     4f6:	88 a1       	ldd	r24, Y+32	; 0x20
     4f8:	99 a1       	ldd	r25, Y+33	; 0x21
     4fa:	05 c0       	rjmp	.+10     	; 0x506 <_ZN19DFRobotDFPlayerMini9readStateEv+0x34>
     4fc:	8f ef       	ldi	r24, 0xFF	; 255
     4fe:	9f ef       	ldi	r25, 0xFF	; 255
     500:	02 c0       	rjmp	.+4      	; 0x506 <_ZN19DFRobotDFPlayerMini9readStateEv+0x34>
     502:	8f ef       	ldi	r24, 0xFF	; 255
     504:	9f ef       	ldi	r25, 0xFF	; 255
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	08 95       	ret

0000050c <_ZN19DFRobotDFPlayerMini14readFileCountsEh>:
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	ec 01       	movw	r28, r24
     512:	62 30       	cpi	r22, 0x02	; 2
     514:	41 f0       	breq	.+16     	; 0x526 <_ZN19DFRobotDFPlayerMini14readFileCountsEh+0x1a>
     516:	65 30       	cpi	r22, 0x05	; 5
     518:	51 f0       	breq	.+20     	; 0x52e <_ZN19DFRobotDFPlayerMini14readFileCountsEh+0x22>
     51a:	61 30       	cpi	r22, 0x01	; 1
     51c:	59 f4       	brne	.+22     	; 0x534 <_ZN19DFRobotDFPlayerMini14readFileCountsEh+0x28>
     51e:	67 e4       	ldi	r22, 0x47	; 71
     520:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN19DFRobotDFPlayerMini9sendStackEh>
     524:	07 c0       	rjmp	.+14     	; 0x534 <_ZN19DFRobotDFPlayerMini14readFileCountsEh+0x28>
     526:	68 e4       	ldi	r22, 0x48	; 72
     528:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN19DFRobotDFPlayerMini9sendStackEh>
     52c:	03 c0       	rjmp	.+6      	; 0x534 <_ZN19DFRobotDFPlayerMini14readFileCountsEh+0x28>
     52e:	69 e4       	ldi	r22, 0x49	; 73
     530:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN19DFRobotDFPlayerMini9sendStackEh>
     534:	40 e0       	ldi	r20, 0x00	; 0
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	ba 01       	movw	r22, r20
     53a:	ce 01       	movw	r24, r28
     53c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_ZN19DFRobotDFPlayerMini13waitAvailableEm>
     540:	88 23       	and	r24, r24
     542:	39 f0       	breq	.+14     	; 0x552 <_ZN19DFRobotDFPlayerMini14readFileCountsEh+0x46>
     544:	1a a2       	std	Y+34, r1	; 0x22
     546:	8e 8d       	ldd	r24, Y+30	; 0x1e
     548:	8b 30       	cpi	r24, 0x0B	; 11
     54a:	31 f4       	brne	.+12     	; 0x558 <_ZN19DFRobotDFPlayerMini14readFileCountsEh+0x4c>
     54c:	88 a1       	ldd	r24, Y+32	; 0x20
     54e:	99 a1       	ldd	r25, Y+33	; 0x21
     550:	05 c0       	rjmp	.+10     	; 0x55c <_ZN19DFRobotDFPlayerMini14readFileCountsEh+0x50>
     552:	8f ef       	ldi	r24, 0xFF	; 255
     554:	9f ef       	ldi	r25, 0xFF	; 255
     556:	02 c0       	rjmp	.+4      	; 0x55c <_ZN19DFRobotDFPlayerMini14readFileCountsEh+0x50>
     558:	8f ef       	ldi	r24, 0xFF	; 255
     55a:	9f ef       	ldi	r25, 0xFF	; 255
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	08 95       	ret

00000562 <_ZN19DFRobotDFPlayerMini21readCurrentFileNumberEh>:
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	ec 01       	movw	r28, r24
     568:	62 30       	cpi	r22, 0x02	; 2
     56a:	41 f0       	breq	.+16     	; 0x57c <_ZN19DFRobotDFPlayerMini21readCurrentFileNumberEh+0x1a>
     56c:	65 30       	cpi	r22, 0x05	; 5
     56e:	51 f0       	breq	.+20     	; 0x584 <_ZN19DFRobotDFPlayerMini21readCurrentFileNumberEh+0x22>
     570:	61 30       	cpi	r22, 0x01	; 1
     572:	59 f4       	brne	.+22     	; 0x58a <_ZN19DFRobotDFPlayerMini21readCurrentFileNumberEh+0x28>
     574:	6b e4       	ldi	r22, 0x4B	; 75
     576:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN19DFRobotDFPlayerMini9sendStackEh>
     57a:	07 c0       	rjmp	.+14     	; 0x58a <_ZN19DFRobotDFPlayerMini21readCurrentFileNumberEh+0x28>
     57c:	6c e4       	ldi	r22, 0x4C	; 76
     57e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN19DFRobotDFPlayerMini9sendStackEh>
     582:	03 c0       	rjmp	.+6      	; 0x58a <_ZN19DFRobotDFPlayerMini21readCurrentFileNumberEh+0x28>
     584:	6d e4       	ldi	r22, 0x4D	; 77
     586:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <_ZN19DFRobotDFPlayerMini9sendStackEh>
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	ba 01       	movw	r22, r20
     590:	ce 01       	movw	r24, r28
     592:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_ZN19DFRobotDFPlayerMini13waitAvailableEm>
     596:	88 23       	and	r24, r24
     598:	39 f0       	breq	.+14     	; 0x5a8 <_ZN19DFRobotDFPlayerMini21readCurrentFileNumberEh+0x46>
     59a:	1a a2       	std	Y+34, r1	; 0x22
     59c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     59e:	8b 30       	cpi	r24, 0x0B	; 11
     5a0:	31 f4       	brne	.+12     	; 0x5ae <_ZN19DFRobotDFPlayerMini21readCurrentFileNumberEh+0x4c>
     5a2:	88 a1       	ldd	r24, Y+32	; 0x20
     5a4:	99 a1       	ldd	r25, Y+33	; 0x21
     5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <_ZN19DFRobotDFPlayerMini21readCurrentFileNumberEh+0x50>
     5a8:	8f ef       	ldi	r24, 0xFF	; 255
     5aa:	9f ef       	ldi	r25, 0xFF	; 255
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <_ZN19DFRobotDFPlayerMini21readCurrentFileNumberEh+0x50>
     5ae:	8f ef       	ldi	r24, 0xFF	; 255
     5b0:	9f ef       	ldi	r25, 0xFF	; 255
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <_ZN19DFRobotDFPlayerMini14readFileCountsEv>:

int DFRobotDFPlayerMini::readFileCounts(){
  return readFileCounts(DFPLAYER_DEVICE_SD);
     5b8:	62 e0       	ldi	r22, 0x02	; 2
     5ba:	0e 94 86 02 	call	0x50c	; 0x50c <_ZN19DFRobotDFPlayerMini14readFileCountsEh>
}
     5be:	08 95       	ret

000005c0 <_ZN19DFRobotDFPlayerMini21readCurrentFileNumberEv>:

int DFRobotDFPlayerMini::readCurrentFileNumber(){
  return readCurrentFileNumber(DFPLAYER_DEVICE_SD);
     5c0:	62 e0       	ldi	r22, 0x02	; 2
     5c2:	0e 94 b1 02 	call	0x562	; 0x562 <_ZN19DFRobotDFPlayerMini21readCurrentFileNumberEh>
}
     5c6:	08 95       	ret

000005c8 <_Z8twi_initv>:
/* Write byte to UART. */
void sc16is_uart_write(uint8_t value) {
	// Wait for space in TX buffer
	while (sc16is_read(TXLVL) == 0) ;
	sc16is_write(THR, value); 
}
     5c8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5cc:	88 e4       	ldi	r24, 0x48	; 72
     5ce:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     5d2:	08 95       	ret

000005d4 <_Z8twi_waitv>:
     5d4:	ec eb       	ldi	r30, 0xBC	; 188
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	80 81       	ld	r24, Z
     5da:	88 23       	and	r24, r24
     5dc:	ec f7       	brge	.-6      	; 0x5d8 <_Z8twi_waitv+0x4>
     5de:	08 95       	ret

000005e0 <_Z14twi_send_startv>:
     5e0:	84 ea       	ldi	r24, 0xA4	; 164
     5e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5e6:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_Z8twi_waitv>
     5ea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5ee:	88 7f       	andi	r24, 0xF8	; 248
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	08 95       	ret

000005f4 <_Z13twi_send_byteh>:
     5f4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     5f8:	84 e8       	ldi	r24, 0x84	; 132
     5fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     5fe:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_Z8twi_waitv>
     602:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     606:	88 7f       	andi	r24, 0xF8	; 248
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	08 95       	ret

0000060c <_Z17twi_receive_bytesPhi>:
     60c:	5f 92       	push	r5
     60e:	6f 92       	push	r6
     610:	7f 92       	push	r7
     612:	8f 92       	push	r8
     614:	9f 92       	push	r9
     616:	af 92       	push	r10
     618:	bf 92       	push	r11
     61a:	cf 92       	push	r12
     61c:	df 92       	push	r13
     61e:	ef 92       	push	r14
     620:	ff 92       	push	r15
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	3b 01       	movw	r6, r22
     62c:	16 16       	cp	r1, r22
     62e:	17 06       	cpc	r1, r23
     630:	a4 f5       	brge	.+104    	; 0x69a <_Z17twi_receive_bytesPhi+0x8e>
     632:	c8 2f       	mov	r28, r24
     634:	d9 2f       	mov	r29, r25
     636:	84 ec       	ldi	r24, 0xC4	; 196
     638:	00 e0       	ldi	r16, 0x00	; 0
     63a:	10 e0       	ldi	r17, 0x00	; 0
     63c:	0f 2e       	mov	r0, r31
     63e:	fc eb       	ldi	r31, 0xBC	; 188
     640:	af 2e       	mov	r10, r31
     642:	b1 2c       	mov	r11, r1
     644:	f0 2d       	mov	r31, r0
     646:	0f 2e       	mov	r0, r31
     648:	f9 eb       	ldi	r31, 0xB9	; 185
     64a:	cf 2e       	mov	r12, r31
     64c:	d1 2c       	mov	r13, r1
     64e:	f0 2d       	mov	r31, r0
     650:	0f 2e       	mov	r0, r31
     652:	fb eb       	ldi	r31, 0xBB	; 187
     654:	8f 2e       	mov	r8, r31
     656:	91 2c       	mov	r9, r1
     658:	f0 2d       	mov	r31, r0
     65a:	01 c0       	rjmp	.+2      	; 0x65e <_Z17twi_receive_bytesPhi+0x52>
     65c:	85 2d       	mov	r24, r5
     65e:	7e 01       	movw	r14, r28
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	69 16       	cp	r6, r25
     664:	71 04       	cpc	r7, r1
     666:	81 f1       	breq	.+96     	; 0x6c8 <_Z17twi_receive_bytesPhi+0xbc>
     668:	58 2e       	mov	r5, r24
     66a:	f5 01       	movw	r30, r10
     66c:	80 83       	st	Z, r24
     66e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_Z8twi_waitv>
     672:	f6 01       	movw	r30, r12
     674:	80 81       	ld	r24, Z
     676:	88 7f       	andi	r24, 0xF8	; 248
     678:	80 35       	cpi	r24, 0x50	; 80
     67a:	19 f0       	breq	.+6      	; 0x682 <_Z17twi_receive_bytesPhi+0x76>
     67c:	88 35       	cpi	r24, 0x58	; 88
     67e:	b1 f0       	breq	.+44     	; 0x6ac <_Z17twi_receive_bytesPhi+0xa0>
     680:	0f c0       	rjmp	.+30     	; 0x6a0 <_Z17twi_receive_bytesPhi+0x94>
     682:	f4 01       	movw	r30, r8
     684:	80 81       	ld	r24, Z
     686:	88 83       	st	Y, r24
     688:	21 96       	adiw	r28, 0x01	; 1
     68a:	0f 5f       	subi	r16, 0xFF	; 255
     68c:	1f 4f       	sbci	r17, 0xFF	; 255
     68e:	f1 e0       	ldi	r31, 0x01	; 1
     690:	6f 1a       	sub	r6, r31
     692:	71 08       	sbc	r7, r1
     694:	19 f7       	brne	.-58     	; 0x65c <_Z17twi_receive_bytesPhi+0x50>
     696:	c8 01       	movw	r24, r16
     698:	24 c0       	rjmp	.+72     	; 0x6e2 <_Z17twi_receive_bytesPhi+0xd6>
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	21 c0       	rjmp	.+66     	; 0x6e2 <_Z17twi_receive_bytesPhi+0xd6>
     6a0:	8f ef       	ldi	r24, 0xFF	; 255
     6a2:	9f ef       	ldi	r25, 0xFF	; 255
     6a4:	1e c0       	rjmp	.+60     	; 0x6e2 <_Z17twi_receive_bytesPhi+0xd6>
     6a6:	8f ef       	ldi	r24, 0xFF	; 255
     6a8:	9f ef       	ldi	r25, 0xFF	; 255
     6aa:	1b c0       	rjmp	.+54     	; 0x6e2 <_Z17twi_receive_bytesPhi+0xd6>
     6ac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     6b0:	f7 01       	movw	r30, r14
     6b2:	80 83       	st	Z, r24
     6b4:	c8 01       	movw	r24, r16
     6b6:	01 96       	adiw	r24, 0x01	; 1
     6b8:	14 c0       	rjmp	.+40     	; 0x6e2 <_Z17twi_receive_bytesPhi+0xd6>
     6ba:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     6be:	f7 01       	movw	r30, r14
     6c0:	80 83       	st	Z, r24
     6c2:	0f 5f       	subi	r16, 0xFF	; 255
     6c4:	1f 4f       	sbci	r17, 0xFF	; 255
     6c6:	e7 cf       	rjmp	.-50     	; 0x696 <_Z17twi_receive_bytesPhi+0x8a>
     6c8:	84 e8       	ldi	r24, 0x84	; 132
     6ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     6ce:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_Z8twi_waitv>
     6d2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     6d6:	88 7f       	andi	r24, 0xF8	; 248
     6d8:	80 35       	cpi	r24, 0x50	; 80
     6da:	79 f3       	breq	.-34     	; 0x6ba <_Z17twi_receive_bytesPhi+0xae>
     6dc:	88 35       	cpi	r24, 0x58	; 88
     6de:	31 f3       	breq	.-52     	; 0x6ac <_Z17twi_receive_bytesPhi+0xa0>
     6e0:	e2 cf       	rjmp	.-60     	; 0x6a6 <_Z17twi_receive_bytesPhi+0x9a>
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	df 90       	pop	r13
     6f0:	cf 90       	pop	r12
     6f2:	bf 90       	pop	r11
     6f4:	af 90       	pop	r10
     6f6:	9f 90       	pop	r9
     6f8:	8f 90       	pop	r8
     6fa:	7f 90       	pop	r7
     6fc:	6f 90       	pop	r6
     6fe:	5f 90       	pop	r5
     700:	08 95       	ret

00000702 <_Z15sc16is_set_addrh>:
     702:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
     706:	08 95       	ret

00000708 <_Z16sc16is_write_bufhiPh>:
     708:	af 92       	push	r10
     70a:	bf 92       	push	r11
     70c:	cf 92       	push	r12
     70e:	df 92       	push	r13
     710:	ef 92       	push	r14
     712:	ff 92       	push	r15
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	a8 2e       	mov	r10, r24
     71e:	8b 01       	movw	r16, r22
     720:	7a 01       	movw	r14, r20
     722:	cc e2       	ldi	r28, 0x2C	; 44
     724:	d1 e0       	ldi	r29, 0x01	; 1
     726:	c1 2c       	mov	r12, r1
     728:	bb 24       	eor	r11, r11
     72a:	b3 94       	inc	r11
     72c:	05 c0       	rjmp	.+10     	; 0x738 <_Z16sc16is_write_bufhiPh+0x30>
     72e:	dc 2c       	mov	r13, r12
     730:	01 c0       	rjmp	.+2      	; 0x734 <_Z16sc16is_write_bufhiPh+0x2c>
     732:	db 2c       	mov	r13, r11
     734:	d1 10       	cpse	r13, r1
     736:	3f c0       	rjmp	.+126    	; 0x7b6 <_Z16sc16is_write_bufhiPh+0xae>
     738:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_Z14twi_send_startv>
     73c:	80 31       	cpi	r24, 0x10	; 16
     73e:	91 05       	cpc	r25, r1
     740:	29 f0       	breq	.+10     	; 0x74c <_Z16sc16is_write_bufhiPh+0x44>
     742:	88 33       	cpi	r24, 0x38	; 56
     744:	91 05       	cpc	r25, r1
     746:	c1 f3       	breq	.-16     	; 0x738 <_Z16sc16is_write_bufhiPh+0x30>
     748:	08 97       	sbiw	r24, 0x08	; 8
     74a:	d9 f5       	brne	.+118    	; 0x7c2 <_Z16sc16is_write_bufhiPh+0xba>
     74c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
     750:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z13twi_send_byteh>
     754:	80 32       	cpi	r24, 0x20	; 32
     756:	91 05       	cpc	r25, r1
     758:	39 f0       	breq	.+14     	; 0x768 <_Z16sc16is_write_bufhiPh+0x60>
     75a:	88 33       	cpi	r24, 0x38	; 56
     75c:	91 05       	cpc	r25, r1
     75e:	39 f3       	breq	.-50     	; 0x72e <_Z16sc16is_write_bufhiPh+0x26>
     760:	48 97       	sbiw	r24, 0x18	; 24
     762:	51 f0       	breq	.+20     	; 0x778 <_Z16sc16is_write_bufhiPh+0x70>
     764:	db 2c       	mov	r13, r11
     766:	01 c0       	rjmp	.+2      	; 0x76a <_Z16sc16is_write_bufhiPh+0x62>
     768:	dc 2c       	mov	r13, r12
     76a:	df 93       	push	r29
     76c:	cf 93       	push	r28
     76e:	0e 94 94 09 	call	0x1328	; 0x1328 <printf>
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	de cf       	rjmp	.-68     	; 0x734 <_Z16sc16is_write_bufhiPh+0x2c>
     778:	8a 2d       	mov	r24, r10
     77a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z13twi_send_byteh>
     77e:	88 32       	cpi	r24, 0x28	; 40
     780:	91 05       	cpc	r25, r1
     782:	19 f0       	breq	.+6      	; 0x78a <_Z16sc16is_write_bufhiPh+0x82>
     784:	c8 97       	sbiw	r24, 0x38	; 56
     786:	c1 f2       	breq	.-80     	; 0x738 <_Z16sc16is_write_bufhiPh+0x30>
     788:	d4 cf       	rjmp	.-88     	; 0x732 <_Z16sc16is_write_bufhiPh+0x2a>
     78a:	10 16       	cp	r1, r16
     78c:	11 06       	cpc	r1, r17
     78e:	6c f4       	brge	.+26     	; 0x7aa <_Z16sc16is_write_bufhiPh+0xa2>
     790:	c0 e0       	ldi	r28, 0x00	; 0
     792:	f7 01       	movw	r30, r14
     794:	ec 0f       	add	r30, r28
     796:	f1 1d       	adc	r31, r1
     798:	80 81       	ld	r24, Z
     79a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z13twi_send_byteh>
     79e:	cf 5f       	subi	r28, 0xFF	; 255
     7a0:	8c 2f       	mov	r24, r28
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	80 17       	cp	r24, r16
     7a6:	91 07       	cpc	r25, r17
     7a8:	a4 f3       	brlt	.-24     	; 0x792 <_Z16sc16is_write_bufhiPh+0x8a>
     7aa:	84 e9       	ldi	r24, 0x94	; 148
     7ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	08 c0       	rjmp	.+16     	; 0x7c6 <_Z16sc16is_write_bufhiPh+0xbe>
     7b6:	84 e9       	ldi	r24, 0x94	; 148
     7b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <_Z16sc16is_write_bufhiPh+0xbe>
     7c2:	8f ef       	ldi	r24, 0xFF	; 255
     7c4:	9f ef       	ldi	r25, 0xFF	; 255
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	bf 90       	pop	r11
     7d8:	af 90       	pop	r10
     7da:	08 95       	ret

000007dc <_Z12sc16is_writehh>:
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	1f 92       	push	r1
     7e2:	cd b7       	in	r28, 0x3d	; 61
     7e4:	de b7       	in	r29, 0x3e	; 62
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	ae 01       	movw	r20, r28
     7ea:	4f 5f       	subi	r20, 0xFF	; 255
     7ec:	5f 4f       	sbci	r21, 0xFF	; 255
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	0e 94 84 03 	call	0x708	; 0x708 <_Z16sc16is_write_bufhiPh>
     7f6:	0f 90       	pop	r0
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret

000007fe <_Z15sc16is_read_bufhiPh>:
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	c8 2f       	mov	r28, r24
     80a:	7b 01       	movw	r14, r22
     80c:	8a 01       	movw	r16, r20
     80e:	06 c0       	rjmp	.+12     	; 0x81c <_Z15sc16is_read_bufhiPh+0x1e>
     810:	84 e9       	ldi	r24, 0x94	; 148
     812:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     816:	8f ef       	ldi	r24, 0xFF	; 255
     818:	9f ef       	ldi	r25, 0xFF	; 255
     81a:	3e c0       	rjmp	.+124    	; 0x898 <_Z15sc16is_read_bufhiPh+0x9a>
     81c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_Z14twi_send_startv>
     820:	80 31       	cpi	r24, 0x10	; 16
     822:	91 05       	cpc	r25, r1
     824:	29 f0       	breq	.+10     	; 0x830 <_Z15sc16is_read_bufhiPh+0x32>
     826:	88 33       	cpi	r24, 0x38	; 56
     828:	91 05       	cpc	r25, r1
     82a:	c1 f3       	breq	.-16     	; 0x81c <_Z15sc16is_read_bufhiPh+0x1e>
     82c:	08 97       	sbiw	r24, 0x08	; 8
     82e:	91 f5       	brne	.+100    	; 0x894 <_Z15sc16is_read_bufhiPh+0x96>
     830:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
     834:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z13twi_send_byteh>
     838:	80 32       	cpi	r24, 0x20	; 32
     83a:	91 05       	cpc	r25, r1
     83c:	79 f3       	breq	.-34     	; 0x81c <_Z15sc16is_read_bufhiPh+0x1e>
     83e:	88 33       	cpi	r24, 0x38	; 56
     840:	91 05       	cpc	r25, r1
     842:	61 f3       	breq	.-40     	; 0x81c <_Z15sc16is_read_bufhiPh+0x1e>
     844:	48 97       	sbiw	r24, 0x18	; 24
     846:	21 f7       	brne	.-56     	; 0x810 <_Z15sc16is_read_bufhiPh+0x12>
     848:	8c 2f       	mov	r24, r28
     84a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z13twi_send_byteh>
     84e:	88 32       	cpi	r24, 0x28	; 40
     850:	91 05       	cpc	r25, r1
     852:	19 f0       	breq	.+6      	; 0x85a <_Z15sc16is_read_bufhiPh+0x5c>
     854:	c8 97       	sbiw	r24, 0x38	; 56
     856:	11 f3       	breq	.-60     	; 0x81c <_Z15sc16is_read_bufhiPh+0x1e>
     858:	db cf       	rjmp	.-74     	; 0x810 <_Z15sc16is_read_bufhiPh+0x12>
     85a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_Z14twi_send_startv>
     85e:	80 31       	cpi	r24, 0x10	; 16
     860:	91 05       	cpc	r25, r1
     862:	29 f0       	breq	.+10     	; 0x86e <_Z15sc16is_read_bufhiPh+0x70>
     864:	88 33       	cpi	r24, 0x38	; 56
     866:	91 05       	cpc	r25, r1
     868:	c9 f2       	breq	.-78     	; 0x81c <_Z15sc16is_read_bufhiPh+0x1e>
     86a:	08 97       	sbiw	r24, 0x08	; 8
     86c:	89 f6       	brne	.-94     	; 0x810 <_Z15sc16is_read_bufhiPh+0x12>
     86e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
     872:	81 60       	ori	r24, 0x01	; 1
     874:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z13twi_send_byteh>
     878:	88 33       	cpi	r24, 0x38	; 56
     87a:	91 05       	cpc	r25, r1
     87c:	79 f2       	breq	.-98     	; 0x81c <_Z15sc16is_read_bufhiPh+0x1e>
     87e:	80 34       	cpi	r24, 0x40	; 64
     880:	91 05       	cpc	r25, r1
     882:	31 f6       	brne	.-116    	; 0x810 <_Z15sc16is_read_bufhiPh+0x12>
     884:	b7 01       	movw	r22, r14
     886:	c8 01       	movw	r24, r16
     888:	0e 94 06 03 	call	0x60c	; 0x60c <_Z17twi_receive_bytesPhi>
     88c:	24 e9       	ldi	r18, 0x94	; 148
     88e:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     892:	02 c0       	rjmp	.+4      	; 0x898 <_Z15sc16is_read_bufhiPh+0x9a>
     894:	8f ef       	ldi	r24, 0xFF	; 255
     896:	9f ef       	ldi	r25, 0xFF	; 255
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	ff 90       	pop	r15
     8a0:	ef 90       	pop	r14
     8a2:	08 95       	ret

000008a4 <_Z11sc16is_readh>:
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	1f 92       	push	r1
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
     8ae:	ae 01       	movw	r20, r28
     8b0:	4f 5f       	subi	r20, 0xFF	; 255
     8b2:	5f 4f       	sbci	r21, 0xFF	; 255
     8b4:	61 e0       	ldi	r22, 0x01	; 1
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <_Z15sc16is_read_bufhiPh>
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	19 f4       	brne	.+6      	; 0x8c6 <_Z11sc16is_readh+0x22>
     8c0:	89 81       	ldd	r24, Y+1	; 0x01
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <_Z11sc16is_readh+0x26>
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0f 90       	pop	r0
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	08 95       	ret

000008d2 <_Z15sc16is_set_baudm>:
     8d2:	cf 92       	push	r12
     8d4:	df 92       	push	r13
     8d6:	ef 92       	push	r14
     8d8:	ff 92       	push	r15
     8da:	dc 01       	movw	r26, r24
     8dc:	cb 01       	movw	r24, r22
     8de:	88 0f       	add	r24, r24
     8e0:	99 1f       	adc	r25, r25
     8e2:	aa 1f       	adc	r26, r26
     8e4:	bb 1f       	adc	r27, r27
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	aa 1f       	adc	r26, r26
     8ec:	bb 1f       	adc	r27, r27
     8ee:	9c 01       	movw	r18, r24
     8f0:	ad 01       	movw	r20, r26
     8f2:	22 0f       	add	r18, r18
     8f4:	33 1f       	adc	r19, r19
     8f6:	44 1f       	adc	r20, r20
     8f8:	55 1f       	adc	r21, r21
     8fa:	22 0f       	add	r18, r18
     8fc:	33 1f       	adc	r19, r19
     8fe:	44 1f       	adc	r20, r20
     900:	55 1f       	adc	r21, r21
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	81 ee       	ldi	r24, 0xE1	; 225
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__udivmodsi4>
     90e:	69 01       	movw	r12, r18
     910:	7a 01       	movw	r14, r20
     912:	60 e8       	ldi	r22, 0x80	; 128
     914:	88 e1       	ldi	r24, 0x18	; 24
     916:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_Z12sc16is_writehh>
     91a:	6c 2d       	mov	r22, r12
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_Z12sc16is_writehh>
     922:	99 27       	eor	r25, r25
     924:	8f 2d       	mov	r24, r15
     926:	7e 2d       	mov	r23, r14
     928:	6d 2d       	mov	r22, r13
     92a:	88 e0       	ldi	r24, 0x08	; 8
     92c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_Z12sc16is_writehh>
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	df 90       	pop	r13
     936:	cf 90       	pop	r12
     938:	08 95       	ret

0000093a <_Z16sc16is_configurem>:
     93a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <_Z15sc16is_set_baudm>
     93e:	63 e0       	ldi	r22, 0x03	; 3
     940:	88 e1       	ldi	r24, 0x18	; 24
     942:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_Z12sc16is_writehh>
     946:	66 e0       	ldi	r22, 0x06	; 6
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_Z12sc16is_writehh>
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	80 e1       	ldi	r24, 0x10	; 16
     952:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_Z12sc16is_writehh>
     956:	08 95       	ret

00000958 <_Z16sc16is_connectedv>:
     958:	68 e4       	ldi	r22, 0x48	; 72
     95a:	88 e3       	ldi	r24, 0x38	; 56
     95c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <_Z12sc16is_writehh>
     960:	88 e3       	ldi	r24, 0x38	; 56
     962:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_Z11sc16is_readh>
     966:	21 e0       	ldi	r18, 0x01	; 1
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	88 34       	cpi	r24, 0x48	; 72
     96c:	11 f0       	breq	.+4      	; 0x972 <_Z16sc16is_connectedv+0x1a>
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	c9 01       	movw	r24, r18
     974:	08 95       	ret

00000976 <_Z11sc16is_initm>:
     976:	cf 92       	push	r12
     978:	df 92       	push	r13
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	6b 01       	movw	r12, r22
     980:	7c 01       	movw	r14, r24
     982:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_Z8twi_initv>
     986:	c7 01       	movw	r24, r14
     988:	b6 01       	movw	r22, r12
     98a:	0e 94 9d 04 	call	0x93a	; 0x93a <_Z16sc16is_configurem>
     98e:	0e 94 ac 04 	call	0x958	; 0x958 <_Z16sc16is_connectedv>
     992:	89 2b       	or	r24, r25
     994:	09 f4       	brne	.+2      	; 0x998 <_Z11sc16is_initm+0x22>
     996:	ff cf       	rjmp	.-2      	; 0x996 <_Z11sc16is_initm+0x20>
     998:	ff 90       	pop	r15
     99a:	ef 90       	pop	r14
     99c:	df 90       	pop	r13
     99e:	cf 90       	pop	r12
     9a0:	08 95       	ret

000009a2 <_Z16sc16is_availablev>:
     9a2:	88 e4       	ldi	r24, 0x48	; 72
     9a4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_Z11sc16is_readh>
     9a8:	08 95       	ret

000009aa <_Z16sc16is_uart_readv>:
     9aa:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_Z16sc16is_availablev>
     9ae:	88 23       	and	r24, r24
     9b0:	e1 f3       	breq	.-8      	; 0x9aa <_Z16sc16is_uart_readv>
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_Z11sc16is_readh>
     9b8:	08 95       	ret

000009ba <_Z21sc16is_uart_write_bufPhi>:
}

/* Write buffer to UART. */
void sc16is_uart_write_buf(uint8_t *buffer, int size) {
	// break this into chunks of 16?
	sc16is_write_buf(THR,size,buffer);
     9ba:	ac 01       	movw	r20, r24
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	0e 94 84 03 	call	0x708	; 0x708 <_Z16sc16is_write_bufhiPh>
     9c2:	08 95       	ret

000009c4 <_Z10USART_Initj>:
uint16_t soundWait = 0;

void USART_Init(unsigned int ubrr)
{
	/* Set baud rate */	
	UBRR0H = (unsigned char)(ubrr>>8);	// Load upper 8-bits of the baud rate value into the high byte of the UBRR register
     9c4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;		// Load lower 8-bits of the baud rate value into the low byte of the UBRR register
     9c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<RXCIE0); //|(1<<TXEN);
     9cc:	80 e9       	ldi	r24, 0x90	; 144
     9ce:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	/* Set frame format: 8data, 2stop bit, no parity */
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01); // Use 8-bit character sizes
     9d2:	86 e0       	ldi	r24, 0x06	; 6
     9d4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	
	data_count = 0;
     9d8:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <data_count>
	command_ready = false;
     9dc:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <command_ready>
	ignore = true;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <ignore>
     9e6:	08 95       	ret

000009e8 <__vector_18>:

/*
 * ISR RX complete
 * Receives a char from UART and stores it in ring buffer.
 */
ISR(USART_RX_vect) {
     9e8:	1f 92       	push	r1
     9ea:	0f 92       	push	r0
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	0f 92       	push	r0
     9f0:	11 24       	eor	r1, r1
     9f2:	2f 93       	push	r18
     9f4:	8f 93       	push	r24
     9f6:	9f 93       	push	r25
     9f8:	af 93       	push	r26
     9fa:	bf 93       	push	r27
     9fc:	ef 93       	push	r30
     9fe:	ff 93       	push	r31
	//	unsigned char value;
	//	value = UDR;  // Fetch the received byte value into the variable "value"
	//	UDR = value;    //Put the value to UDR = send

	// Get data from the USART in register
	unsigned char temp = UDR0;
     a00:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     a04:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a06:	f8 94       	cli
			{
				Count = Buffer->Count;
     a08:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <Buffer+0x24>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a0c:	9f bf       	out	0x3f, r25	; 63
	
	if (RingBuffer_IsFull(&Buffer) == false) {
     a0e:	80 32       	cpi	r24, 0x20	; 32
     a10:	b9 f0       	breq	.+46     	; 0xa40 <__vector_18+0x58>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
     a12:	e7 e7       	ldi	r30, 0x77	; 119
     a14:	f1 e0       	ldi	r31, 0x01	; 1
     a16:	a0 a1       	ldd	r26, Z+32	; 0x20
     a18:	b1 a1       	ldd	r27, Z+33	; 0x21
     a1a:	2c 93       	st	X, r18
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
     a1c:	80 a1       	ldd	r24, Z+32	; 0x20
     a1e:	91 a1       	ldd	r25, Z+33	; 0x21
     a20:	01 96       	adiw	r24, 0x01	; 1
     a22:	91 a3       	std	Z+33, r25	; 0x21
     a24:	80 a3       	std	Z+32, r24	; 0x20
     a26:	87 59       	subi	r24, 0x97	; 151
     a28:	91 40       	sbci	r25, 0x01	; 1
     a2a:	11 f4       	brne	.+4      	; 0xa30 <__vector_18+0x48>
			  Buffer->In = Buffer->Buffer;
     a2c:	f1 a3       	std	Z+33, r31	; 0x21
     a2e:	e0 a3       	std	Z+32, r30	; 0x20

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     a30:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a32:	f8 94       	cli
			{
				Buffer->Count++;
     a34:	e7 e7       	ldi	r30, 0x77	; 119
     a36:	f1 e0       	ldi	r31, 0x01	; 1
     a38:	84 a1       	ldd	r24, Z+36	; 0x24
     a3a:	8f 5f       	subi	r24, 0xFF	; 255
     a3c:	84 a3       	std	Z+36, r24	; 0x24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a3e:	9f bf       	out	0x3f, r25	; 63
		RingBuffer_Insert(&Buffer, temp);
	}
}
     a40:	ff 91       	pop	r31
     a42:	ef 91       	pop	r30
     a44:	bf 91       	pop	r27
     a46:	af 91       	pop	r26
     a48:	9f 91       	pop	r25
     a4a:	8f 91       	pop	r24
     a4c:	2f 91       	pop	r18
     a4e:	0f 90       	pop	r0
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	0f 90       	pop	r0
     a54:	1f 90       	pop	r1
     a56:	18 95       	reti

00000a58 <_Z13myRandomValuehh>:


uint8_t myRandomValue(uint8_t ibase, uint8_t irand) {
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	d8 2f       	mov	r29, r24
     a5e:	c6 2f       	mov	r28, r22
	return ibase +(rand() / (RAND_MAX / irand + 1));
     a60:	0e 94 84 09 	call	0x1308	; 0x1308 <rand>
     a64:	9c 01       	movw	r18, r24
     a66:	6c 2f       	mov	r22, r28
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	8f ef       	ldi	r24, 0xFF	; 255
     a6c:	9f e7       	ldi	r25, 0x7F	; 127
     a6e:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__divmodhi4>
     a72:	6f 5f       	subi	r22, 0xFF	; 255
     a74:	7f 4f       	sbci	r23, 0xFF	; 255
     a76:	c9 01       	movw	r24, r18
     a78:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <__divmodhi4>
}
     a7c:	8d 2f       	mov	r24, r29
     a7e:	86 0f       	add	r24, r22
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	08 95       	ret

00000a86 <_Z11iUpDownCalch>:

void iUpDownCalc(uint8_t ix) {
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
	if (command_ready == false && ledData[ix].ledMode == 1) { // if command_ready == true then these values will be manipulated elsewhere.
     a8a:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <command_ready>
     a8e:	91 11       	cpse	r25, r1
     a90:	66 c0       	rjmp	.+204    	; 0xb5e <_Z11iUpDownCalch+0xd8>
     a92:	c8 2f       	mov	r28, r24
     a94:	d0 e0       	ldi	r29, 0x00	; 0
     a96:	fe 01       	movw	r30, r28
     a98:	ee 0f       	add	r30, r30
     a9a:	ff 1f       	adc	r31, r31
     a9c:	ee 0f       	add	r30, r30
     a9e:	ff 1f       	adc	r31, r31
     aa0:	ec 0f       	add	r30, r28
     aa2:	fd 1f       	adc	r31, r29
     aa4:	ec 5f       	subi	r30, 0xFC	; 252
     aa6:	fe 4f       	sbci	r31, 0xFE	; 254
     aa8:	84 81       	ldd	r24, Z+4	; 0x04
     aaa:	81 30       	cpi	r24, 0x01	; 1
     aac:	09 f0       	breq	.+2      	; 0xab0 <_Z11iUpDownCalch+0x2a>
     aae:	57 c0       	rjmp	.+174    	; 0xb5e <_Z11iUpDownCalch+0xd8>
     ab0:	48 c0       	rjmp	.+144    	; 0xb42 <_Z11iUpDownCalch+0xbc>
		if (ledData[ix].waitValue == 0) {
			if (ledData[ix].newValue > ledData[ix].currentValue)	{
     ab2:	fe 01       	movw	r30, r28
     ab4:	ee 0f       	add	r30, r30
     ab6:	ff 1f       	adc	r31, r31
     ab8:	ee 0f       	add	r30, r30
     aba:	ff 1f       	adc	r31, r31
     abc:	ec 0f       	add	r30, r28
     abe:	fd 1f       	adc	r31, r29
     ac0:	ec 5f       	subi	r30, 0xFC	; 252
     ac2:	fe 4f       	sbci	r31, 0xFE	; 254
     ac4:	91 81       	ldd	r25, Z+1	; 0x01
     ac6:	82 81       	ldd	r24, Z+2	; 0x02
     ac8:	89 17       	cp	r24, r25
     aca:	20 f4       	brcc	.+8      	; 0xad4 <_Z11iUpDownCalch+0x4e>
				ledData[ix].currentValue++;
     acc:	82 81       	ldd	r24, Z+2	; 0x02
     ace:	8f 5f       	subi	r24, 0xFF	; 255
     ad0:	82 83       	std	Z+2, r24	; 0x02
     ad2:	45 c0       	rjmp	.+138    	; 0xb5e <_Z11iUpDownCalch+0xd8>
			} else if (ledData[ix].newValue < ledData[ix].currentValue)	{
     ad4:	fe 01       	movw	r30, r28
     ad6:	ee 0f       	add	r30, r30
     ad8:	ff 1f       	adc	r31, r31
     ada:	ee 0f       	add	r30, r30
     adc:	ff 1f       	adc	r31, r31
     ade:	ec 0f       	add	r30, r28
     ae0:	fd 1f       	adc	r31, r29
     ae2:	ec 5f       	subi	r30, 0xFC	; 252
     ae4:	fe 4f       	sbci	r31, 0xFE	; 254
     ae6:	91 81       	ldd	r25, Z+1	; 0x01
     ae8:	82 81       	ldd	r24, Z+2	; 0x02
     aea:	98 17       	cp	r25, r24
     aec:	20 f4       	brcc	.+8      	; 0xaf6 <_Z11iUpDownCalch+0x70>
				ledData[ix].currentValue--;
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	81 50       	subi	r24, 0x01	; 1
     af2:	82 83       	std	Z+2, r24	; 0x02
     af4:	34 c0       	rjmp	.+104    	; 0xb5e <_Z11iUpDownCalch+0xd8>
			} else {
				ledData[ix].newValue = myRandomValue(0,10)*10; // 10 steps for pwm
     af6:	6a e0       	ldi	r22, 0x0A	; 10
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z13myRandomValuehh>
     afe:	88 0f       	add	r24, r24
     b00:	98 2f       	mov	r25, r24
     b02:	99 0f       	add	r25, r25
     b04:	99 0f       	add	r25, r25
     b06:	89 0f       	add	r24, r25
     b08:	9e 01       	movw	r18, r28
     b0a:	22 0f       	add	r18, r18
     b0c:	33 1f       	adc	r19, r19
     b0e:	22 0f       	add	r18, r18
     b10:	33 1f       	adc	r19, r19
     b12:	c2 0f       	add	r28, r18
     b14:	d3 1f       	adc	r29, r19
     b16:	cc 5f       	subi	r28, 0xFC	; 252
     b18:	de 4f       	sbci	r29, 0xFE	; 254
     b1a:	89 83       	std	Y+1, r24	; 0x01
				ledData[ix].waitValue = myRandomValue(5,75);
     b1c:	6b e4       	ldi	r22, 0x4B	; 75
     b1e:	85 e0       	ldi	r24, 0x05	; 5
     b20:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z13myRandomValuehh>
     b24:	8b 83       	std	Y+3, r24	; 0x03
     b26:	1b c0       	rjmp	.+54     	; 0xb5e <_Z11iUpDownCalch+0xd8>
			}
		} else {
			ledData[ix].waitValue--;
     b28:	ce 01       	movw	r24, r28
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	88 0f       	add	r24, r24
     b30:	99 1f       	adc	r25, r25
     b32:	c8 0f       	add	r28, r24
     b34:	d9 1f       	adc	r29, r25
     b36:	cc 5f       	subi	r28, 0xFC	; 252
     b38:	de 4f       	sbci	r29, 0xFE	; 254
     b3a:	8b 81       	ldd	r24, Y+3	; 0x03
     b3c:	81 50       	subi	r24, 0x01	; 1
     b3e:	8b 83       	std	Y+3, r24	; 0x03
		}
	}
}
     b40:	0e c0       	rjmp	.+28     	; 0xb5e <_Z11iUpDownCalch+0xd8>
	return ibase +(rand() / (RAND_MAX / irand + 1));
}

void iUpDownCalc(uint8_t ix) {
	if (command_ready == false && ledData[ix].ledMode == 1) { // if command_ready == true then these values will be manipulated elsewhere.
		if (ledData[ix].waitValue == 0) {
     b42:	fe 01       	movw	r30, r28
     b44:	ee 0f       	add	r30, r30
     b46:	ff 1f       	adc	r31, r31
     b48:	ee 0f       	add	r30, r30
     b4a:	ff 1f       	adc	r31, r31
     b4c:	ec 0f       	add	r30, r28
     b4e:	fd 1f       	adc	r31, r29
     b50:	ec 5f       	subi	r30, 0xFC	; 252
     b52:	fe 4f       	sbci	r31, 0xFE	; 254
     b54:	83 81       	ldd	r24, Z+3	; 0x03
     b56:	88 23       	and	r24, r24
     b58:	09 f4       	brne	.+2      	; 0xb5c <_Z11iUpDownCalch+0xd6>
     b5a:	ab cf       	rjmp	.-170    	; 0xab2 <_Z11iUpDownCalch+0x2c>
     b5c:	e5 cf       	rjmp	.-54     	; 0xb28 <_Z11iUpDownCalch+0xa2>
			}
		} else {
			ledData[ix].waitValue--;
		}
	}
}
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	08 95       	ret

00000b64 <__vector_9>:

ISR(TIMER2_OVF_vect)
{
     b64:	1f 92       	push	r1
     b66:	0f 92       	push	r0
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	0f 92       	push	r0
     b6c:	11 24       	eor	r1, r1
     b6e:	2f 93       	push	r18
     b70:	3f 93       	push	r19
     b72:	4f 93       	push	r20
     b74:	5f 93       	push	r21
     b76:	6f 93       	push	r22
     b78:	7f 93       	push	r23
     b7a:	8f 93       	push	r24
     b7c:	9f 93       	push	r25
     b7e:	ef 93       	push	r30
     b80:	ff 93       	push	r31
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
		if( pwm_phase == 100)
		{
			if (ledData[i].ledPin >= 5 && ledData[i].ledPin <= 7) {
				PORTD &= ~(1<< ledData[i].ledPin); // LED uit
			} else {
				PORTB &= ~(1<< ledData[i].ledPin); // LED uit
     b86:	41 e0       	ldi	r20, 0x01	; 1
     b88:	50 e0       	ldi	r21, 0x00	; 0

ISR(TIMER2_OVF_vect)
{
	// begin pwm leds
	for (uint8_t i=0;i<N_LED;i++) {
		if( pwm_phase == 100)
     b8a:	20 91 65 01 	lds	r18, 0x0165	; 0x800165 <pwm_phase>
     b8e:	24 36       	cpi	r18, 0x64	; 100
     b90:	d9 f4       	brne	.+54     	; 0xbc8 <__vector_9+0x64>
		{
			if (ledData[i].ledPin >= 5 && ledData[i].ledPin <= 7) {
     b92:	9c 01       	movw	r18, r24
     b94:	fc 01       	movw	r30, r24
     b96:	ee 0f       	add	r30, r30
     b98:	ff 1f       	adc	r31, r31
     b9a:	ee 0f       	add	r30, r30
     b9c:	ff 1f       	adc	r31, r31
     b9e:	e8 0f       	add	r30, r24
     ba0:	f9 1f       	adc	r31, r25
     ba2:	ec 5f       	subi	r30, 0xFC	; 252
     ba4:	fe 4f       	sbci	r31, 0xFE	; 254
     ba6:	60 81       	ld	r22, Z
     ba8:	65 30       	cpi	r22, 0x05	; 5
     baa:	08 f4       	brcc	.+2      	; 0xbae <__vector_9+0x4a>
     bac:	5a c0       	rjmp	.+180    	; 0xc62 <__vector_9+0xfe>
     bae:	fc 01       	movw	r30, r24
     bb0:	ee 0f       	add	r30, r30
     bb2:	ff 1f       	adc	r31, r31
     bb4:	ee 0f       	add	r30, r30
     bb6:	ff 1f       	adc	r31, r31
     bb8:	e8 0f       	add	r30, r24
     bba:	f9 1f       	adc	r31, r25
     bbc:	ec 5f       	subi	r30, 0xFC	; 252
     bbe:	fe 4f       	sbci	r31, 0xFE	; 254
     bc0:	60 81       	ld	r22, Z
     bc2:	68 30       	cpi	r22, 0x08	; 8
     bc4:	b0 f1       	brcs	.+108    	; 0xc32 <__vector_9+0xce>
     bc6:	4d c0       	rjmp	.+154    	; 0xc62 <__vector_9+0xfe>
				PORTD &= ~(1<< ledData[i].ledPin); // LED uit
			} else {
				PORTB &= ~(1<< ledData[i].ledPin); // LED uit
			}
		}
		if( ledData[i].currentValue == pwm_phase && pwm_phase != 100)
     bc8:	9c 01       	movw	r18, r24
     bca:	fc 01       	movw	r30, r24
     bcc:	ee 0f       	add	r30, r30
     bce:	ff 1f       	adc	r31, r31
     bd0:	ee 0f       	add	r30, r30
     bd2:	ff 1f       	adc	r31, r31
     bd4:	e8 0f       	add	r30, r24
     bd6:	f9 1f       	adc	r31, r25
     bd8:	ec 5f       	subi	r30, 0xFC	; 252
     bda:	fe 4f       	sbci	r31, 0xFE	; 254
     bdc:	72 81       	ldd	r23, Z+2	; 0x02
     bde:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <pwm_phase>
     be2:	76 13       	cpse	r23, r22
     be4:	14 c0       	rjmp	.+40     	; 0xc0e <__vector_9+0xaa>
     be6:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <pwm_phase>
     bea:	64 36       	cpi	r22, 0x64	; 100
     bec:	09 f0       	breq	.+2      	; 0xbf0 <__vector_9+0x8c>
     bee:	51 c0       	rjmp	.+162    	; 0xc92 <__vector_9+0x12e>
     bf0:	0e c0       	rjmp	.+28     	; 0xc0e <__vector_9+0xaa>
		{
			if (ledData[i].ledPin >= 5 && ledData[i].ledPin <= 7) {
     bf2:	f9 01       	movw	r30, r18
     bf4:	ee 0f       	add	r30, r30
     bf6:	ff 1f       	adc	r31, r31
     bf8:	ee 0f       	add	r30, r30
     bfa:	ff 1f       	adc	r31, r31
     bfc:	e2 0f       	add	r30, r18
     bfe:	f3 1f       	adc	r31, r19
     c00:	ec 5f       	subi	r30, 0xFC	; 252
     c02:	fe 4f       	sbci	r31, 0xFE	; 254
     c04:	60 81       	ld	r22, Z
     c06:	68 30       	cpi	r22, 0x08	; 8
     c08:	08 f4       	brcc	.+2      	; 0xc0c <__vector_9+0xa8>
     c0a:	51 c0       	rjmp	.+162    	; 0xcae <__vector_9+0x14a>
     c0c:	66 c0       	rjmp	.+204    	; 0xcda <__vector_9+0x176>
     c0e:	01 96       	adiw	r24, 0x01	; 1
}

ISR(TIMER2_OVF_vect)
{
	// begin pwm leds
	for (uint8_t i=0;i<N_LED;i++) {
     c10:	86 30       	cpi	r24, 0x06	; 6
     c12:	91 05       	cpc	r25, r1
     c14:	09 f0       	breq	.+2      	; 0xc18 <__vector_9+0xb4>
     c16:	b9 cf       	rjmp	.-142    	; 0xb8a <__vector_9+0x26>
				} else {
				PORTB |= (1<< ledData[i].ledPin); // LED aan
			}
		}
	}
	if (pwm_phase == 100) {
     c18:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <pwm_phase>
     c1c:	84 36       	cpi	r24, 0x64	; 100
     c1e:	19 f4       	brne	.+6      	; 0xc26 <__vector_9+0xc2>
		pwm_phase = 0;
     c20:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <pwm_phase>
     c24:	70 c0       	rjmp	.+224    	; 0xd06 <__vector_9+0x1a2>
	} else {
		pwm_phase++;
     c26:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <pwm_phase>
     c2a:	8f 5f       	subi	r24, 0xFF	; 255
     c2c:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <pwm_phase>
	}
	// end pwm leds
}
     c30:	6a c0       	rjmp	.+212    	; 0xd06 <__vector_9+0x1a2>
	// begin pwm leds
	for (uint8_t i=0;i<N_LED;i++) {
		if( pwm_phase == 100)
		{
			if (ledData[i].ledPin >= 5 && ledData[i].ledPin <= 7) {
				PORTD &= ~(1<< ledData[i].ledPin); // LED uit
     c32:	fc 01       	movw	r30, r24
     c34:	ee 0f       	add	r30, r30
     c36:	ff 1f       	adc	r31, r31
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	2e 0f       	add	r18, r30
     c3e:	3f 1f       	adc	r19, r31
     c40:	f9 01       	movw	r30, r18
     c42:	ec 5f       	subi	r30, 0xFC	; 252
     c44:	fe 4f       	sbci	r31, 0xFE	; 254
     c46:	20 81       	ld	r18, Z
     c48:	6b b1       	in	r22, 0x0b	; 11
     c4a:	fa 01       	movw	r30, r20
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <__vector_9+0xee>
     c4e:	ee 0f       	add	r30, r30
     c50:	ff 1f       	adc	r31, r31
     c52:	2a 95       	dec	r18
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <__vector_9+0xea>
     c56:	9f 01       	movw	r18, r30
     c58:	20 95       	com	r18
     c5a:	30 95       	com	r19
     c5c:	26 23       	and	r18, r22
     c5e:	2b b9       	out	0x0b, r18	; 11
     c60:	b3 cf       	rjmp	.-154    	; 0xbc8 <__vector_9+0x64>
			} else {
				PORTB &= ~(1<< ledData[i].ledPin); // LED uit
     c62:	f9 01       	movw	r30, r18
     c64:	ee 0f       	add	r30, r30
     c66:	ff 1f       	adc	r31, r31
     c68:	ee 0f       	add	r30, r30
     c6a:	ff 1f       	adc	r31, r31
     c6c:	2e 0f       	add	r18, r30
     c6e:	3f 1f       	adc	r19, r31
     c70:	f9 01       	movw	r30, r18
     c72:	ec 5f       	subi	r30, 0xFC	; 252
     c74:	fe 4f       	sbci	r31, 0xFE	; 254
     c76:	20 81       	ld	r18, Z
     c78:	65 b1       	in	r22, 0x05	; 5
     c7a:	fa 01       	movw	r30, r20
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <__vector_9+0x11e>
     c7e:	ee 0f       	add	r30, r30
     c80:	ff 1f       	adc	r31, r31
     c82:	2a 95       	dec	r18
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <__vector_9+0x11a>
     c86:	9f 01       	movw	r18, r30
     c88:	20 95       	com	r18
     c8a:	30 95       	com	r19
     c8c:	26 23       	and	r18, r22
     c8e:	25 b9       	out	0x05, r18	; 5
     c90:	9b cf       	rjmp	.-202    	; 0xbc8 <__vector_9+0x64>
			}
		}
		if( ledData[i].currentValue == pwm_phase && pwm_phase != 100)
		{
			if (ledData[i].ledPin >= 5 && ledData[i].ledPin <= 7) {
     c92:	fc 01       	movw	r30, r24
     c94:	ee 0f       	add	r30, r30
     c96:	ff 1f       	adc	r31, r31
     c98:	ee 0f       	add	r30, r30
     c9a:	ff 1f       	adc	r31, r31
     c9c:	e8 0f       	add	r30, r24
     c9e:	f9 1f       	adc	r31, r25
     ca0:	ec 5f       	subi	r30, 0xFC	; 252
     ca2:	fe 4f       	sbci	r31, 0xFE	; 254
     ca4:	60 81       	ld	r22, Z
     ca6:	65 30       	cpi	r22, 0x05	; 5
     ca8:	08 f0       	brcs	.+2      	; 0xcac <__vector_9+0x148>
     caa:	a3 cf       	rjmp	.-186    	; 0xbf2 <__vector_9+0x8e>
     cac:	16 c0       	rjmp	.+44     	; 0xcda <__vector_9+0x176>
				PORTD |= (1<< ledData[i].ledPin); // LED aan
     cae:	f9 01       	movw	r30, r18
     cb0:	ee 0f       	add	r30, r30
     cb2:	ff 1f       	adc	r31, r31
     cb4:	ee 0f       	add	r30, r30
     cb6:	ff 1f       	adc	r31, r31
     cb8:	2e 0f       	add	r18, r30
     cba:	3f 1f       	adc	r19, r31
     cbc:	f9 01       	movw	r30, r18
     cbe:	ec 5f       	subi	r30, 0xFC	; 252
     cc0:	fe 4f       	sbci	r31, 0xFE	; 254
     cc2:	20 81       	ld	r18, Z
     cc4:	6b b1       	in	r22, 0x0b	; 11
     cc6:	fa 01       	movw	r30, r20
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <__vector_9+0x16a>
     cca:	ee 0f       	add	r30, r30
     ccc:	ff 1f       	adc	r31, r31
     cce:	2a 95       	dec	r18
     cd0:	e2 f7       	brpl	.-8      	; 0xcca <__vector_9+0x166>
     cd2:	9f 01       	movw	r18, r30
     cd4:	26 2b       	or	r18, r22
     cd6:	2b b9       	out	0x0b, r18	; 11
     cd8:	9a cf       	rjmp	.-204    	; 0xc0e <__vector_9+0xaa>
				} else {
				PORTB |= (1<< ledData[i].ledPin); // LED aan
     cda:	f9 01       	movw	r30, r18
     cdc:	ee 0f       	add	r30, r30
     cde:	ff 1f       	adc	r31, r31
     ce0:	ee 0f       	add	r30, r30
     ce2:	ff 1f       	adc	r31, r31
     ce4:	2e 0f       	add	r18, r30
     ce6:	3f 1f       	adc	r19, r31
     ce8:	f9 01       	movw	r30, r18
     cea:	ec 5f       	subi	r30, 0xFC	; 252
     cec:	fe 4f       	sbci	r31, 0xFE	; 254
     cee:	20 81       	ld	r18, Z
     cf0:	65 b1       	in	r22, 0x05	; 5
     cf2:	fa 01       	movw	r30, r20
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <__vector_9+0x196>
     cf6:	ee 0f       	add	r30, r30
     cf8:	ff 1f       	adc	r31, r31
     cfa:	2a 95       	dec	r18
     cfc:	e2 f7       	brpl	.-8      	; 0xcf6 <__vector_9+0x192>
     cfe:	9f 01       	movw	r18, r30
     d00:	26 2b       	or	r18, r22
     d02:	25 b9       	out	0x05, r18	; 5
     d04:	84 cf       	rjmp	.-248    	; 0xc0e <__vector_9+0xaa>
		pwm_phase = 0;
	} else {
		pwm_phase++;
	}
	// end pwm leds
}
     d06:	ff 91       	pop	r31
     d08:	ef 91       	pop	r30
     d0a:	9f 91       	pop	r25
     d0c:	8f 91       	pop	r24
     d0e:	7f 91       	pop	r23
     d10:	6f 91       	pop	r22
     d12:	5f 91       	pop	r21
     d14:	4f 91       	pop	r20
     d16:	3f 91       	pop	r19
     d18:	2f 91       	pop	r18
     d1a:	0f 90       	pop	r0
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	0f 90       	pop	r0
     d20:	1f 90       	pop	r1
     d22:	18 95       	reti

00000d24 <__vector_16>:

ISR(TIMER0_OVF_vect)
{			
     d24:	1f 92       	push	r1
     d26:	0f 92       	push	r0
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	0f 92       	push	r0
     d2c:	11 24       	eor	r1, r1
     d2e:	2f 93       	push	r18
     d30:	3f 93       	push	r19
     d32:	4f 93       	push	r20
     d34:	5f 93       	push	r21
     d36:	6f 93       	push	r22
     d38:	7f 93       	push	r23
     d3a:	8f 93       	push	r24
     d3c:	9f 93       	push	r25
     d3e:	af 93       	push	r26
     d40:	bf 93       	push	r27
     d42:	ef 93       	push	r30
     d44:	ff 93       	push	r31
	if (tel >=0 && tel < N_LED) {
     d46:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tel>
     d4a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tel>
     d4e:	86 30       	cpi	r24, 0x06	; 6
     d50:	20 f4       	brcc	.+8      	; 0xd5a <__vector_16+0x36>
		iUpDownCalc(tel);	// Fading from 'color' to 'color'
     d52:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tel>
     d56:	0e 94 43 05 	call	0xa86	; 0xa86 <_Z11iUpDownCalch>
	}
	if (tel == 8) {
     d5a:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tel>
     d5e:	88 30       	cpi	r24, 0x08	; 8
     d60:	59 f4       	brne	.+22     	; 0xd78 <__vector_16+0x54>
		if (soundWait > 0) {
     d62:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <soundWait>
     d66:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <soundWait+0x1>
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	29 f0       	breq	.+10     	; 0xd78 <__vector_16+0x54>
			soundWait--;
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <soundWait+0x1>
     d74:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <soundWait>
		}
	}
	if (++tel == 9) {
     d78:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <tel>
     d7c:	8f 5f       	subi	r24, 0xFF	; 255
     d7e:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <tel>
     d82:	89 30       	cpi	r24, 0x09	; 9
     d84:	31 f4       	brne	.+12     	; 0xd92 <__vector_16+0x6e>
		PORTB ^= (1 << PINB3) | (1 << PINB4); // Toggle the LEDs		
     d86:	95 b1       	in	r25, 0x05	; 5
     d88:	88 e1       	ldi	r24, 0x18	; 24
     d8a:	89 27       	eor	r24, r25
     d8c:	85 b9       	out	0x05, r24	; 5
		tel = 0;
     d8e:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <tel>
	}	
}
     d92:	ff 91       	pop	r31
     d94:	ef 91       	pop	r30
     d96:	bf 91       	pop	r27
     d98:	af 91       	pop	r26
     d9a:	9f 91       	pop	r25
     d9c:	8f 91       	pop	r24
     d9e:	7f 91       	pop	r23
     da0:	6f 91       	pop	r22
     da2:	5f 91       	pop	r21
     da4:	4f 91       	pop	r20
     da6:	3f 91       	pop	r19
     da8:	2f 91       	pop	r18
     daa:	0f 90       	pop	r0
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	0f 90       	pop	r0
     db0:	1f 90       	pop	r1
     db2:	18 95       	reti

00000db4 <_Z8initrandv>:
void initrand()
{
        uint32_t state;
        static uint32_t EEMEM sstate = 1;

        state = eeprom_read_dword(&sstate);
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 43 0c 	call	0x1886	; 0x1886 <eeprom_read_dword>

        // Check if it's unwritten EEPROM (first time). Use something funny
        // in that case.
        if (state == 0xffffffUL)
     dbc:	6f 3f       	cpi	r22, 0xFF	; 255
     dbe:	2f ef       	ldi	r18, 0xFF	; 255
     dc0:	72 07       	cpc	r23, r18
     dc2:	82 07       	cpc	r24, r18
     dc4:	91 05       	cpc	r25, r1
     dc6:	21 f4       	brne	.+8      	; 0xdd0 <_Z8initrandv+0x1c>
                state = 0xDEADBEEFUL;
     dc8:	6f ee       	ldi	r22, 0xEF	; 239
     dca:	7e eb       	ldi	r23, 0xBE	; 190
     dcc:	8d ea       	ldi	r24, 0xAD	; 173
     dce:	9e ed       	ldi	r25, 0xDE	; 222
        srand(state);
     dd0:	cb 01       	movw	r24, r22
     dd2:	0e 94 89 09 	call	0x1312	; 0x1312 <srand>
		
		state = !state;
        eeprom_write_dword(&sstate,rand());				
     dd6:	0e 94 84 09 	call	0x1308	; 0x1308 <rand>
     dda:	ac 01       	movw	r20, r24
     ddc:	99 0f       	add	r25, r25
     dde:	66 0b       	sbc	r22, r22
     de0:	77 0b       	sbc	r23, r23
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 49 0c 	call	0x1892	; 0x1892 <eeprom_write_dword>
     dea:	08 95       	ret

00000dec <main>:
} 

int main(void)
{
	DDRB |= (1<<DDB0) | (1<<DDB1) | (1<<DDB2) | (1<<DDB3) | (1<<DDB4);
     dec:	84 b1       	in	r24, 0x04	; 4
     dee:	8f 61       	ori	r24, 0x1F	; 31
     df0:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1<<DDD5) | (1<<DDD6) | (1<<DDD7)  ; //(1<<DDB3); // = output
     df2:	8a b1       	in	r24, 0x0a	; 10
     df4:	80 6e       	ori	r24, 0xE0	; 224
     df6:	8a b9       	out	0x0a, r24	; 10
	PORTB &= ~((1<<PINB0) | (1<<PINB1) | (1<<PINB2) | (1<<PINB3) | (1<<PINB4));
     df8:	85 b1       	in	r24, 0x05	; 5
     dfa:	80 7e       	andi	r24, 0xE0	; 224
     dfc:	85 b9       	out	0x05, r24	; 5
	PORTD &= ~((1<<PIND5) | (1<<PIND6) | (1<<PIND7) ); //| (1<<PIND0)
     dfe:	8b b1       	in	r24, 0x0b	; 11
     e00:	8f 71       	andi	r24, 0x1F	; 31
     e02:	8b b9       	out	0x0b, r24	; 11
	PORTB |= ~(1<<PINB3);
     e04:	85 b1       	in	r24, 0x05	; 5
     e06:	87 6f       	ori	r24, 0xF7	; 247
     e08:	85 b9       	out	0x05, r24	; 5
	
	eAddress = eeprom_read_byte(&deviceConfig);	
     e0a:	84 e0       	ldi	r24, 0x04	; 4
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <eeprom_read_byte>
     e12:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <eAddress>
	
	initrand();	
     e16:	0e 94 da 06 	call	0xdb4	; 0xdb4 <_Z8initrandv>
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     e1a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     e1c:	f8 94       	cli
			{
				Buffer->In    = Buffer->Buffer;
     e1e:	e7 e7       	ldi	r30, 0x77	; 119
     e20:	f1 e0       	ldi	r31, 0x01	; 1
     e22:	f1 a3       	std	Z+33, r31	; 0x21
     e24:	e0 a3       	std	Z+32, r30	; 0x20
				Buffer->Out   = Buffer->Buffer;
     e26:	f3 a3       	std	Z+35, r31	; 0x23
     e28:	e2 a3       	std	Z+34, r30	; 0x22
				Buffer->Count = 0;
     e2a:	14 a2       	std	Z+36, r1	; 0x24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     e2c:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
     e2e:	c0 e0       	ldi	r28, 0x00	; 0
     e30:	d0 e0       	ldi	r29, 0x00	; 0
	
	// Initialize the buffer with the created storage array
	RingBuffer_InitBuffer(&Buffer);
	
	for (uint8_t i=0;i<N_LED;i++) {
		ledData[i].newValue = myRandomValue(0,10)*10;
     e32:	6a e0       	ldi	r22, 0x0A	; 10
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z13myRandomValuehh>
     e3a:	88 0f       	add	r24, r24
     e3c:	98 2f       	mov	r25, r24
     e3e:	99 0f       	add	r25, r25
     e40:	99 0f       	add	r25, r25
     e42:	89 0f       	add	r24, r25
     e44:	fe 01       	movw	r30, r28
     e46:	ee 0f       	add	r30, r30
     e48:	ff 1f       	adc	r31, r31
     e4a:	ee 0f       	add	r30, r30
     e4c:	ff 1f       	adc	r31, r31
     e4e:	ec 0f       	add	r30, r28
     e50:	fd 1f       	adc	r31, r29
     e52:	ec 5f       	subi	r30, 0xFC	; 252
     e54:	fe 4f       	sbci	r31, 0xFE	; 254
     e56:	81 83       	std	Z+1, r24	; 0x01
     e58:	21 96       	adiw	r28, 0x01	; 1
	initrand();	
	
	// Initialize the buffer with the created storage array
	RingBuffer_InitBuffer(&Buffer);
	
	for (uint8_t i=0;i<N_LED;i++) {
     e5a:	c6 30       	cpi	r28, 0x06	; 6
     e5c:	d1 05       	cpc	r29, r1
     e5e:	49 f7       	brne	.-46     	; 0xe32 <main+0x46>
		ledData[i].newValue = myRandomValue(0,10)*10;
	}
	
	// Setup Timer 0
	
	TCCR0A = 0b00000000;   // Normal Mode
     e60:	14 bc       	out	0x24, r1	; 36
	TCCR0B =  (1<<CS00) | (1<<CS02);   // Div 1024 Prescaler
     e62:	85 e0       	ldi	r24, 0x05	; 5
     e64:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;            // Initial value
     e66:	16 bc       	out	0x26, r1	; 38
	
	// Enable interrupts as needed
	TIMSK0 |= (1<<TOIE0); //(1<<OCIE0A);      // Timer 0 Interrupt	
     e68:	ee e6       	ldi	r30, 0x6E	; 110
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	81 60       	ori	r24, 0x01	; 1
     e70:	80 83       	st	Z, r24
	
	// Setup Timer 2
	
	TCCR2A = 0b00000000;   // Normal Mode
     e72:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	TCCR2B =  (1<<CS21) ;   // Div 1024 Prescaler
     e76:	82 e0       	ldi	r24, 0x02	; 2
     e78:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TCNT2 = 0;            // Initial value
     e7c:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>

	// Enable interrupts as needed
	TIMSK2 |= (1<<TOIE2); //(1<<OCIE0A);      // Timer 2 Interrupt	
     e80:	e0 e7       	ldi	r30, 0x70	; 112
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	81 60       	ori	r24, 0x01	; 1
     e88:	80 83       	st	Z, r24
	
	USART_Init(MYUBRR);
     e8a:	87 e6       	ldi	r24, 0x67	; 103
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <_Z10USART_Initj>
	 		
		 
	sei();               // Global Interrupts
     e92:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e94:	2f ef       	ldi	r18, 0xFF	; 255
     e96:	63 ed       	ldi	r22, 0xD3	; 211
     e98:	80 e3       	ldi	r24, 0x30	; 48
     e9a:	21 50       	subi	r18, 0x01	; 1
     e9c:	60 40       	sbci	r22, 0x00	; 0
     e9e:	80 40       	sbci	r24, 0x00	; 0
     ea0:	e1 f7       	brne	.-8      	; 0xe9a <main+0xae>
     ea2:	00 c0       	rjmp	.+0      	; 0xea4 <main+0xb8>
     ea4:	00 00       	nop
	
	  _delay_ms(1000); //Wait till voltage stabilizes
	  myDFPlayer.begin(true, false);
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	61 e0       	ldi	r22, 0x01	; 1
     eaa:	8f e3       	ldi	r24, 0x3F	; 63
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	0e 94 28 02 	call	0x450	; 0x450 <_ZN19DFRobotDFPlayerMini5beginEbb>
	  myDFPlayer.setTimeOut(500); //Set serial communictaion time out 500ms
     eb2:	44 ef       	ldi	r20, 0xF4	; 244
     eb4:	51 e0       	ldi	r21, 0x01	; 1
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	70 e0       	ldi	r23, 0x00	; 0
     eba:	8f e3       	ldi	r24, 0x3F	; 63
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	0e 94 75 00 	call	0xea	; 0xea <_ZN19DFRobotDFPlayerMini10setTimeOutEm>

	  myDFPlayer.volume(20);  //Set volume value (0~30).
     ec2:	64 e1       	ldi	r22, 0x14	; 20
     ec4:	8f e3       	ldi	r24, 0x3F	; 63
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	0e 94 09 02 	call	0x412	; 0x412 <_ZN19DFRobotDFPlayerMini6volumeEh>
	  myDFPlayer.EQ(DFPLAYER_EQ_NORMAL);
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	8f e3       	ldi	r24, 0x3F	; 63
     ed0:	91 e0       	ldi	r25, 0x01	; 1
     ed2:	0e 94 0f 02 	call	0x41e	; 0x41e <_ZN19DFRobotDFPlayerMini2EQEh>
      myDFPlayer.outputDevice(DFPLAYER_DEVICE_SD);
     ed6:	62 e0       	ldi	r22, 0x02	; 2
     ed8:	8f e3       	ldi	r24, 0x3F	; 63
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	0e 94 15 02 	call	0x42a	; 0x42a <_ZN19DFRobotDFPlayerMini12outputDeviceEh>
	  int cntFiles = myDFPlayer.readFileCounts()-2; // skip first and remove last
     ee0:	8f e3       	ldi	r24, 0x3F	; 63
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <_ZN19DFRobotDFPlayerMini14readFileCountsEv>
     ee8:	02 97       	sbiw	r24, 0x02	; 2
     eea:	6c 01       	movw	r12, r24
     eec:	9f ef       	ldi	r25, 0xFF	; 255
     eee:	e1 ee       	ldi	r30, 0xE1	; 225
     ef0:	f4 e0       	ldi	r31, 0x04	; 4
     ef2:	91 50       	subi	r25, 0x01	; 1
     ef4:	e0 40       	sbci	r30, 0x00	; 0
     ef6:	f0 40       	sbci	r31, 0x00	; 0
     ef8:	e1 f7       	brne	.-8      	; 0xef2 <main+0x106>
     efa:	00 c0       	rjmp	.+0      	; 0xefc <main+0x110>
     efc:	00 00       	nop
	  //myDFPlayer.randomAll(); //Random play all the mp3.
	  _delay_ms(100);	  
	  
	bool endOfCommand = false;
	bool playingSound = true;
	myDFPlayer.play(1);
     efe:	61 e0       	ldi	r22, 0x01	; 1
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	8f e3       	ldi	r24, 0x3F	; 63
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	0e 94 04 02 	call	0x408	; 0x408 <_ZN19DFRobotDFPlayerMini4playEi>
     f0a:	2f ef       	ldi	r18, 0xFF	; 255
     f0c:	63 ed       	ldi	r22, 0xD3	; 211
     f0e:	80 e3       	ldi	r24, 0x30	; 48
     f10:	21 50       	subi	r18, 0x01	; 1
     f12:	60 40       	sbci	r22, 0x00	; 0
     f14:	80 40       	sbci	r24, 0x00	; 0
     f16:	e1 f7       	brne	.-8      	; 0xf10 <main+0x124>
     f18:	00 c0       	rjmp	.+0      	; 0xf1a <main+0x12e>
     f1a:	00 00       	nop
	  int cntFiles = myDFPlayer.readFileCounts()-2; // skip first and remove last
	  //myDFPlayer.randomAll(); //Random play all the mp3.
	  _delay_ms(100);	  
	  
	bool endOfCommand = false;
	bool playingSound = true;
     f1c:	ff 24       	eor	r15, r15
     f1e:	f3 94       	inc	r15
      myDFPlayer.outputDevice(DFPLAYER_DEVICE_SD);
	  int cntFiles = myDFPlayer.readFileCounts()-2; // skip first and remove last
	  //myDFPlayer.randomAll(); //Random play all the mp3.
	  _delay_ms(100);	  
	  
	bool endOfCommand = false;
     f20:	61 2c       	mov	r6, r1
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
			{
				Count = Buffer->Count;
     f22:	c7 e7       	ldi	r28, 0x77	; 119
     f24:	d1 e0       	ldi	r29, 0x01	; 1
		
		if (lastCmdCount >0) {
			lastCmdCount--;
			if (lastCmdCount == 0) {
				for (uint8_t i=0;i<N_LED;i++) {
					ledData[i].ledMode = 1; // Do random value stuff
     f26:	0f 2e       	mov	r0, r31
     f28:	f4 e0       	ldi	r31, 0x04	; 4
     f2a:	af 2e       	mov	r10, r31
     f2c:	f1 e0       	ldi	r31, 0x01	; 1
     f2e:	bf 2e       	mov	r11, r31
     f30:	f0 2d       	mov	r31, r0
     f32:	11 e0       	ldi	r17, 0x01	; 1
			if (playingSound) {
				if (myDFPlayer.available() && myDFPlayer.readState() != 513) { // Not Busy
					playingSound = false;
				}
				else {
					soundWait = 250; // delay check
     f34:	0f 2e       	mov	r0, r31
     f36:	fa ef       	ldi	r31, 0xFA	; 250
     f38:	4f 2e       	mov	r4, r31
     f3a:	51 2c       	mov	r5, r1
     f3c:	f0 2d       	mov	r31, r0
				
				soundWait = myRandomValue(0,100)*10;
			}
			if (playingSound) {
				if (myDFPlayer.available() && myDFPlayer.readState() != 513) { // Not Busy
					playingSound = false;
     f3e:	71 2c       	mov	r7, r1
				playingSound = true;				
				int curFile = myDFPlayer.readCurrentFileNumber();
				int newFile = 0;
				do 
				{
					newFile = myRandomValue(2,cntFiles); // Skip file 1
     f40:	02 e0       	ldi	r16, 0x02	; 2
				endOfCommand = true;				
			}
		 }
		
		if (command_ready == true)	{				
			if (command_in[0] == eAddress && data_count >= 3) { // Set LED values								
     f42:	0f 2e       	mov	r0, r31
     f44:	fb e6       	ldi	r31, 0x6B	; 107
     f46:	8f 2e       	mov	r8, r31
     f48:	f1 e0       	ldi	r31, 0x01	; 1
     f4a:	9f 2e       	mov	r9, r31
     f4c:	f0 2d       	mov	r31, r0
						// process command
					} else {						
						data_count  =0;
						ignore = true;						
					}					
					lastCmdCount = 8192;					
     f4e:	21 2c       	mov	r2, r1
     f50:	68 94       	set
     f52:	33 24       	eor	r3, r3
     f54:	35 f8       	bld	r3, 5
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     f56:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f58:	f8 94       	cli
			{
				Count = Buffer->Count;
     f5a:	8c a1       	ldd	r24, Y+36	; 0x24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f5c:	9f bf       	out	0x3f, r25	; 63
	
    /* Replace with your application code */
    while (1) 
    {				 
		 // Print contents of the buffer one character at a time		 
		 while (RingBuffer_IsEmpty(&Buffer) == false && command_ready == false) {
     f5e:	88 23       	and	r24, r24
     f60:	09 f4       	brne	.+2      	; 0xf64 <main+0x178>
     f62:	09 c1       	rjmp	.+530    	; 0x1176 <main+0x38a>
     f64:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <command_ready>
     f68:	22 23       	and	r18, r18
     f6a:	09 f4       	brne	.+2      	; 0xf6e <main+0x182>
     f6c:	0a c1       	rjmp	.+532    	; 0x1182 <main+0x396>
     f6e:	03 c1       	rjmp	.+518    	; 0x1176 <main+0x38a>
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->Out = Buffer->Buffer;
     f70:	db a3       	std	Y+35, r29	; 0x23
     f72:	ca a3       	std	Y+34, r28	; 0x22

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     f74:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     f76:	f8 94       	cli
			{
				Buffer->Count--;
     f78:	8c a1       	ldd	r24, Y+36	; 0x24
     f7a:	81 50       	subi	r24, 0x01	; 1
     f7c:	8c a3       	std	Y+36, r24	; 0x24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     f7e:	9f bf       	out	0x3f, r25	; 63
			unsigned char c = RingBuffer_Remove(&Buffer);							
			
			if (data_count >= CMD_BUFFER_SIZE) {
     f80:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <data_count>
     f84:	ec 30       	cpi	r30, 0x0C	; 12
     f86:	28 f0       	brcs	.+10     	; 0xf92 <main+0x1a6>
				// too much data
				endOfCommand = false;
				data_count = 0;
				ignore = true;
     f88:	10 93 68 01 	sts	0x0168, r17	; 0x800168 <ignore>
			}					
				
			if (data_count == 0 && c == eAddress) { // 255 = Address for programming new Address
     f8c:	e2 2f       	mov	r30, r18
		 while (RingBuffer_IsEmpty(&Buffer) == false && command_ready == false) {
			unsigned char c = RingBuffer_Remove(&Buffer);							
			
			if (data_count >= CMD_BUFFER_SIZE) {
				// too much data
				endOfCommand = false;
     f8e:	67 2c       	mov	r6, r7
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <main+0x1aa>
				data_count = 0;
				ignore = true;
			}					
				
			if (data_count == 0 && c == eAddress) { // 255 = Address for programming new Address
     f92:	e1 11       	cpse	r30, r1
     f94:	06 c0       	rjmp	.+12     	; 0xfa2 <main+0x1b6>
     f96:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <eAddress>
     f9a:	83 13       	cpse	r24, r19
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <main+0x1b6>
				// wrong address
				ignore = false;
     f9e:	70 92 68 01 	sts	0x0168, r7	; 0x800168 <ignore>
			}
			
			command_in[data_count++] = c;	
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	8e 0f       	add	r24, r30
     fa6:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <data_count>
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	e5 59       	subi	r30, 0x95	; 149
     fae:	fe 4f       	sbci	r31, 0xFE	; 254
     fb0:	30 83       	st	Z, r19
			
			if (c == '\r') { // End of line!		
     fb2:	3d 30       	cpi	r19, 0x0D	; 13
     fb4:	91 f4       	brne	.+36     	; 0xfda <main+0x1ee>
				if (endOfCommand == true) {
     fb6:	66 20       	and	r6, r6
     fb8:	71 f2       	breq	.-100    	; 0xf56 <main+0x16a>
					if (ignore == false) {
     fba:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <ignore>
     fbe:	81 11       	cpse	r24, r1
     fc0:	03 c0       	rjmp	.+6      	; 0xfc8 <main+0x1dc>
						command_ready = true;
     fc2:	10 93 69 01 	sts	0x0169, r17	; 0x800169 <command_ready>
     fc6:	04 c0       	rjmp	.+8      	; 0xfd0 <main+0x1e4>
						// process command
					} else {						
						data_count  =0;
     fc8:	70 92 6a 01 	sts	0x016A, r7	; 0x80016a <data_count>
						ignore = true;						
     fcc:	10 93 68 01 	sts	0x0168, r17	; 0x800168 <ignore>
					}					
					lastCmdCount = 8192;					
     fd0:	30 92 67 01 	sts	0x0167, r3	; 0x800167 <lastCmdCount+0x1>
     fd4:	20 92 66 01 	sts	0x0166, r2	; 0x800166 <lastCmdCount>
     fd8:	be cf       	rjmp	.-132    	; 0xf56 <main+0x16a>
				}				
			} else {
				endOfCommand = false;
			}
			if (c == '\n') { // End of line!
     fda:	61 2e       	mov	r6, r17
     fdc:	3a 30       	cpi	r19, 0x0A	; 10
     fde:	09 f4       	brne	.+2      	; 0xfe2 <main+0x1f6>
     fe0:	ba cf       	rjmp	.-140    	; 0xf56 <main+0x16a>
     fe2:	67 2c       	mov	r6, r7
     fe4:	b8 cf       	rjmp	.-144    	; 0xf56 <main+0x16a>
				endOfCommand = true;				
			}
		 }
		
		if (command_ready == true)	{				
			if (command_in[0] == eAddress && data_count >= 3) { // Set LED values								
     fe6:	f4 01       	movw	r30, r8
     fe8:	90 81       	ld	r25, Z
     fea:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <eAddress>
     fee:	98 13       	cpse	r25, r24
     ff0:	5c c0       	rjmp	.+184    	; 0x10aa <main+0x2be>
     ff2:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <data_count>
     ff6:	a3 30       	cpi	r26, 0x03	; 3
     ff8:	08 f4       	brcc	.+2      	; 0xffc <main+0x210>
     ffa:	57 c0       	rjmp	.+174    	; 0x10aa <main+0x2be>
				uint8_t iLeds = command_in[1];
     ffc:	41 81       	ldd	r20, Z+1	; 0x01
				uint8_t iValue = command_in[2];
     ffe:	82 81       	ldd	r24, Z+2	; 0x02
				uint8_t iPwm = iValue;
				if (iValue > 100) {
					iValue = 100;//(uint8_t)(iValue/2.55); //max value = 255 eq max pwm 100
				}		
				iPwm = 100-iValue; // 100 = OFF, 0 = 100% ON
    1000:	85 36       	cpi	r24, 0x65	; 101
    1002:	08 f0       	brcs	.+2      	; 0x1006 <main+0x21a>
    1004:	84 e6       	ldi	r24, 0x64	; 100
    1006:	b4 e6       	ldi	r27, 0x64	; 100
    1008:	b8 1b       	sub	r27, r24
				for (uint8_t ix=0;ix < N_LED;ix++) {
					if ( (iLeds & (1 << ix)) != 0) { // iFirst = LEDs
						ledData[ix].newValue = iPwm;
						if (data_count >= 4) {
							if (command_in[3] == 2) {
    100a:	f4 01       	movw	r30, r8
    100c:	e3 80       	ldd	r14, Z+3	; 0x03
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	90 e0       	ldi	r25, 0x00	; 0
				if (iValue > 100) {
					iValue = 100;//(uint8_t)(iValue/2.55); //max value = 255 eq max pwm 100
				}		
				iPwm = 100-iValue; // 100 = OFF, 0 = 100% ON
				for (uint8_t ix=0;ix < N_LED;ix++) {
					if ( (iLeds & (1 << ix)) != 0) { // iFirst = LEDs
    1012:	50 e0       	ldi	r21, 0x00	; 0
    1014:	9c 01       	movw	r18, r24
    1016:	ba 01       	movw	r22, r20
    1018:	08 2e       	mov	r0, r24
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <main+0x234>
    101c:	75 95       	asr	r23
    101e:	67 95       	ror	r22
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <main+0x230>
    1024:	60 ff       	sbrs	r22, 0
    1026:	3c c0       	rjmp	.+120    	; 0x10a0 <main+0x2b4>
						ledData[ix].newValue = iPwm;
    1028:	fc 01       	movw	r30, r24
    102a:	ee 0f       	add	r30, r30
    102c:	ff 1f       	adc	r31, r31
    102e:	ee 0f       	add	r30, r30
    1030:	ff 1f       	adc	r31, r31
    1032:	e8 0f       	add	r30, r24
    1034:	f9 1f       	adc	r31, r25
    1036:	ec 5f       	subi	r30, 0xFC	; 252
    1038:	fe 4f       	sbci	r31, 0xFE	; 254
    103a:	b1 83       	std	Z+1, r27	; 0x01
						if (data_count >= 4) {
    103c:	a4 30       	cpi	r26, 0x04	; 4
    103e:	c8 f0       	brcs	.+50     	; 0x1072 <main+0x286>
							if (command_in[3] == 2) {
    1040:	f2 e0       	ldi	r31, 0x02	; 2
    1042:	ef 12       	cpse	r14, r31
    1044:	0c c0       	rjmp	.+24     	; 0x105e <main+0x272>
								ledData[ix].waitValue = 0;
    1046:	fc 01       	movw	r30, r24
    1048:	ee 0f       	add	r30, r30
    104a:	ff 1f       	adc	r31, r31
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	e8 0f       	add	r30, r24
    1052:	f9 1f       	adc	r31, r25
    1054:	ec 5f       	subi	r30, 0xFC	; 252
    1056:	fe 4f       	sbci	r31, 0xFE	; 254
    1058:	13 82       	std	Z+3, r1	; 0x03
								ledData[ix].ledMode = 2; // 0= manual
    105a:	04 83       	std	Z+4, r16	; 0x04
    105c:	0a c0       	rjmp	.+20     	; 0x1072 <main+0x286>
							} else {
								ledData[ix].ledMode = 1;
    105e:	fc 01       	movw	r30, r24
    1060:	ee 0f       	add	r30, r30
    1062:	ff 1f       	adc	r31, r31
    1064:	ee 0f       	add	r30, r30
    1066:	ff 1f       	adc	r31, r31
    1068:	e8 0f       	add	r30, r24
    106a:	f9 1f       	adc	r31, r25
    106c:	ec 5f       	subi	r30, 0xFC	; 252
    106e:	fe 4f       	sbci	r31, 0xFE	; 254
    1070:	14 83       	std	Z+4, r17	; 0x04
							}
						}
						if (ledData[ix].ledMode == 2) {
    1072:	f9 01       	movw	r30, r18
    1074:	ee 0f       	add	r30, r30
    1076:	ff 1f       	adc	r31, r31
    1078:	ee 0f       	add	r30, r30
    107a:	ff 1f       	adc	r31, r31
    107c:	e2 0f       	add	r30, r18
    107e:	f3 1f       	adc	r31, r19
    1080:	ec 5f       	subi	r30, 0xFC	; 252
    1082:	fe 4f       	sbci	r31, 0xFE	; 254
    1084:	64 81       	ldd	r22, Z+4	; 0x04
    1086:	62 30       	cpi	r22, 0x02	; 2
    1088:	59 f4       	brne	.+22     	; 0x10a0 <main+0x2b4>
							ledData[ix].currentValue = iPwm;
    108a:	b9 01       	movw	r22, r18
    108c:	66 0f       	add	r22, r22
    108e:	77 1f       	adc	r23, r23
    1090:	66 0f       	add	r22, r22
    1092:	77 1f       	adc	r23, r23
    1094:	26 0f       	add	r18, r22
    1096:	37 1f       	adc	r19, r23
    1098:	f9 01       	movw	r30, r18
    109a:	ec 5f       	subi	r30, 0xFC	; 252
    109c:	fe 4f       	sbci	r31, 0xFE	; 254
    109e:	b2 83       	std	Z+2, r27	; 0x02
    10a0:	01 96       	adiw	r24, 0x01	; 1
				uint8_t iPwm = iValue;
				if (iValue > 100) {
					iValue = 100;//(uint8_t)(iValue/2.55); //max value = 255 eq max pwm 100
				}		
				iPwm = 100-iValue; // 100 = OFF, 0 = 100% ON
				for (uint8_t ix=0;ix < N_LED;ix++) {
    10a2:	86 30       	cpi	r24, 0x06	; 6
    10a4:	91 05       	cpc	r25, r1
    10a6:	09 f0       	breq	.+2      	; 0x10aa <main+0x2be>
    10a8:	b5 cf       	rjmp	.-150    	; 0x1014 <main+0x228>
							ledData[ix].currentValue = iPwm;
						}
					}
				}
			}
			data_count =0;						
    10aa:	70 92 6a 01 	sts	0x016A, r7	; 0x80016a <data_count>
			command_ready = false;
    10ae:	70 92 69 01 	sts	0x0169, r7	; 0x800169 <command_ready>
			ignore = true;
    10b2:	10 93 68 01 	sts	0x0168, r17	; 0x800168 <ignore>
		}
		
		if (soundWait == 0) {
    10b6:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <soundWait>
    10ba:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <soundWait+0x1>
    10be:	89 2b       	or	r24, r25
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <main+0x2d8>
    10c2:	42 c0       	rjmp	.+132    	; 0x1148 <main+0x35c>
			if (!playingSound && myRandomValue(0,60) == 28) { // Random misschien
    10c4:	f1 10       	cpse	r15, r1
    10c6:	2c c0       	rjmp	.+88     	; 0x1120 <main+0x334>
    10c8:	6c e3       	ldi	r22, 0x3C	; 60
    10ca:	87 2d       	mov	r24, r7
    10cc:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z13myRandomValuehh>
    10d0:	8c 31       	cpi	r24, 0x1C	; 28
    10d2:	d1 f5       	brne	.+116    	; 0x1148 <main+0x35c>
				// select next sound file					
				playingSound = true;				
				int curFile = myDFPlayer.readCurrentFileNumber();
    10d4:	8f e3       	ldi	r24, 0x3F	; 63
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN19DFRobotDFPlayerMini21readCurrentFileNumberEv>
    10dc:	7c 01       	movw	r14, r24
				int newFile = 0;
				do 
				{
					newFile = myRandomValue(2,cntFiles); // Skip file 1
    10de:	6c 2d       	mov	r22, r12
    10e0:	80 2f       	mov	r24, r16
    10e2:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z13myRandomValuehh>
    10e6:	68 2f       	mov	r22, r24
    10e8:	70 e0       	ldi	r23, 0x00	; 0
				}
				while (curFile == newFile);
    10ea:	e6 16       	cp	r14, r22
    10ec:	f7 06       	cpc	r15, r23
    10ee:	b9 f3       	breq	.-18     	; 0x10de <main+0x2f2>
				myDFPlayer.play(newFile);
    10f0:	8f e3       	ldi	r24, 0x3F	; 63
    10f2:	91 e0       	ldi	r25, 0x01	; 1
    10f4:	0e 94 04 02 	call	0x408	; 0x408 <_ZN19DFRobotDFPlayerMini4playEi>
				
				soundWait = myRandomValue(0,100)*10;
    10f8:	64 e6       	ldi	r22, 0x64	; 100
    10fa:	87 2d       	mov	r24, r7
    10fc:	0e 94 2c 05 	call	0xa58	; 0xa58 <_Z13myRandomValuehh>
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	9c 01       	movw	r18, r24
    1104:	22 0f       	add	r18, r18
    1106:	33 1f       	adc	r19, r19
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	82 0f       	add	r24, r18
    1116:	93 1f       	adc	r25, r19
    1118:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <soundWait+0x1>
    111c:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <soundWait>
			}
			if (playingSound) {
				if (myDFPlayer.available() && myDFPlayer.readState() != 513) { // Not Busy
    1120:	8f e3       	ldi	r24, 0x3F	; 63
    1122:	91 e0       	ldi	r25, 0x01	; 1
    1124:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <_ZN19DFRobotDFPlayerMini9availableEv>
    1128:	88 23       	and	r24, r24
    112a:	39 f0       	breq	.+14     	; 0x113a <main+0x34e>
    112c:	8f e3       	ldi	r24, 0x3F	; 63
    112e:	91 e0       	ldi	r25, 0x01	; 1
    1130:	0e 94 69 02 	call	0x4d2	; 0x4d2 <_ZN19DFRobotDFPlayerMini9readStateEv>
    1134:	81 30       	cpi	r24, 0x01	; 1
    1136:	92 40       	sbci	r25, 0x02	; 2
    1138:	31 f4       	brne	.+12     	; 0x1146 <main+0x35a>
					playingSound = false;
				}
				else {
					soundWait = 250; // delay check
    113a:	50 92 3e 01 	sts	0x013E, r5	; 0x80013e <soundWait+0x1>
    113e:	40 92 3d 01 	sts	0x013D, r4	; 0x80013d <soundWait>
    1142:	f1 2e       	mov	r15, r17
    1144:	01 c0       	rjmp	.+2      	; 0x1148 <main+0x35c>
				
				soundWait = myRandomValue(0,100)*10;
			}
			if (playingSound) {
				if (myDFPlayer.available() && myDFPlayer.readState() != 513) { // Not Busy
					playingSound = false;
    1146:	f7 2c       	mov	r15, r7
			}
		}
		

		
		if (lastCmdCount >0) {
    1148:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <lastCmdCount>
    114c:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <lastCmdCount+0x1>
    1150:	00 97       	sbiw	r24, 0x00	; 0
    1152:	09 f4       	brne	.+2      	; 0x1156 <main+0x36a>
    1154:	00 cf       	rjmp	.-512    	; 0xf56 <main+0x16a>
			lastCmdCount--;
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <lastCmdCount+0x1>
    115c:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <lastCmdCount>
			if (lastCmdCount == 0) {
    1160:	89 2b       	or	r24, r25
    1162:	09 f0       	breq	.+2      	; 0x1166 <main+0x37a>
    1164:	f8 ce       	rjmp	.-528    	; 0xf56 <main+0x16a>
				for (uint8_t i=0;i<N_LED;i++) {
					ledData[i].ledMode = 1; // Do random value stuff
    1166:	f5 01       	movw	r30, r10
    1168:	14 83       	std	Z+4, r17	; 0x04
    116a:	11 87       	std	Z+9, r17	; 0x09
    116c:	16 87       	std	Z+14, r17	; 0x0e
    116e:	13 8b       	std	Z+19, r17	; 0x13
    1170:	10 8f       	std	Z+24, r17	; 0x18
    1172:	15 8f       	std	Z+29, r17	; 0x1d
    1174:	f0 ce       	rjmp	.-544    	; 0xf56 <main+0x16a>
			if (c == '\n') { // End of line!
				endOfCommand = true;				
			}
		 }
		
		if (command_ready == true)	{				
    1176:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <command_ready>
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	09 f0       	breq	.+2      	; 0x1180 <main+0x394>
    117e:	9b cf       	rjmp	.-202    	; 0x10b6 <main+0x2ca>
    1180:	32 cf       	rjmp	.-412    	; 0xfe6 <main+0x1fa>
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
    1182:	ea a1       	ldd	r30, Y+34	; 0x22
    1184:	fb a1       	ldd	r31, Y+35	; 0x23
    1186:	31 91       	ld	r19, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
    1188:	fb a3       	std	Y+35, r31	; 0x23
    118a:	ea a3       	std	Y+34, r30	; 0x22
    118c:	e7 59       	subi	r30, 0x97	; 151
    118e:	f1 40       	sbci	r31, 0x01	; 1
    1190:	09 f0       	breq	.+2      	; 0x1194 <main+0x3a8>
    1192:	f0 ce       	rjmp	.-544    	; 0xf74 <main+0x188>
    1194:	ed ce       	rjmp	.-550    	; 0xf70 <main+0x184>

00001196 <_GLOBAL__sub_I_deviceConfig>:
				}
			}
		}	
    }
	return(0);
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
#define Stack_ACK 4
#define Stack_Parameter 5
#define Stack_CheckSum 7
#define Stack_End 9

class DFRobotDFPlayerMini {
    119a:	cf e3       	ldi	r28, 0x3F	; 63
    119c:	d1 e0       	ldi	r29, 0x01	; 1
    119e:	84 ef       	ldi	r24, 0xF4	; 244
    11a0:	91 e0       	ldi	r25, 0x01	; 1
    11a2:	a0 e0       	ldi	r26, 0x00	; 0
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	8c 83       	std	Y+4, r24	; 0x04
    11a8:	9d 83       	std	Y+5, r25	; 0x05
    11aa:	ae 83       	std	Y+6, r26	; 0x06
    11ac:	bf 83       	std	Y+7, r27	; 0x07
    11ae:	8a e0       	ldi	r24, 0x0A	; 10
    11b0:	e2 e2       	ldi	r30, 0x22	; 34
    11b2:	f1 e0       	ldi	r31, 0x01	; 1
    11b4:	a1 e5       	ldi	r26, 0x51	; 81
    11b6:	b1 e0       	ldi	r27, 0x01	; 1
    11b8:	01 90       	ld	r0, Z+
    11ba:	0d 92       	st	X+, r0
    11bc:	8a 95       	dec	r24
    11be:	e1 f7       	brne	.-8      	; 0x11b8 <_GLOBAL__sub_I_deviceConfig+0x22>
    11c0:	1c 8e       	std	Y+28, r1	; 0x1c
    11c2:	82 e0       	ldi	r24, 0x02	; 2
    11c4:	8d 8f       	std	Y+29, r24	; 0x1d
    11c6:	1a a2       	std	Y+34, r1	; 0x22
    11c8:	1b a2       	std	Y+35, r1	; 0x23
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	08 95       	ret

000011d0 <__divmodhi4>:
    11d0:	97 fb       	bst	r25, 7
    11d2:	07 2e       	mov	r0, r23
    11d4:	16 f4       	brtc	.+4      	; 0x11da <__divmodhi4+0xa>
    11d6:	00 94       	com	r0
    11d8:	07 d0       	rcall	.+14     	; 0x11e8 <__divmodhi4_neg1>
    11da:	77 fd       	sbrc	r23, 7
    11dc:	09 d0       	rcall	.+18     	; 0x11f0 <__divmodhi4_neg2>
    11de:	0e 94 24 09 	call	0x1248	; 0x1248 <__udivmodhi4>
    11e2:	07 fc       	sbrc	r0, 7
    11e4:	05 d0       	rcall	.+10     	; 0x11f0 <__divmodhi4_neg2>
    11e6:	3e f4       	brtc	.+14     	; 0x11f6 <__divmodhi4_exit>

000011e8 <__divmodhi4_neg1>:
    11e8:	90 95       	com	r25
    11ea:	81 95       	neg	r24
    11ec:	9f 4f       	sbci	r25, 0xFF	; 255
    11ee:	08 95       	ret

000011f0 <__divmodhi4_neg2>:
    11f0:	70 95       	com	r23
    11f2:	61 95       	neg	r22
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255

000011f6 <__divmodhi4_exit>:
    11f6:	08 95       	ret

000011f8 <__udivmodsi4>:
    11f8:	a1 e2       	ldi	r26, 0x21	; 33
    11fa:	1a 2e       	mov	r1, r26
    11fc:	aa 1b       	sub	r26, r26
    11fe:	bb 1b       	sub	r27, r27
    1200:	fd 01       	movw	r30, r26
    1202:	0d c0       	rjmp	.+26     	; 0x121e <__udivmodsi4_ep>

00001204 <__udivmodsi4_loop>:
    1204:	aa 1f       	adc	r26, r26
    1206:	bb 1f       	adc	r27, r27
    1208:	ee 1f       	adc	r30, r30
    120a:	ff 1f       	adc	r31, r31
    120c:	a2 17       	cp	r26, r18
    120e:	b3 07       	cpc	r27, r19
    1210:	e4 07       	cpc	r30, r20
    1212:	f5 07       	cpc	r31, r21
    1214:	20 f0       	brcs	.+8      	; 0x121e <__udivmodsi4_ep>
    1216:	a2 1b       	sub	r26, r18
    1218:	b3 0b       	sbc	r27, r19
    121a:	e4 0b       	sbc	r30, r20
    121c:	f5 0b       	sbc	r31, r21

0000121e <__udivmodsi4_ep>:
    121e:	66 1f       	adc	r22, r22
    1220:	77 1f       	adc	r23, r23
    1222:	88 1f       	adc	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	1a 94       	dec	r1
    1228:	69 f7       	brne	.-38     	; 0x1204 <__udivmodsi4_loop>
    122a:	60 95       	com	r22
    122c:	70 95       	com	r23
    122e:	80 95       	com	r24
    1230:	90 95       	com	r25
    1232:	9b 01       	movw	r18, r22
    1234:	ac 01       	movw	r20, r24
    1236:	bd 01       	movw	r22, r26
    1238:	cf 01       	movw	r24, r30
    123a:	08 95       	ret

0000123c <__tablejump2__>:
    123c:	ee 0f       	add	r30, r30
    123e:	ff 1f       	adc	r31, r31
    1240:	05 90       	lpm	r0, Z+
    1242:	f4 91       	lpm	r31, Z
    1244:	e0 2d       	mov	r30, r0
    1246:	09 94       	ijmp

00001248 <__udivmodhi4>:
    1248:	aa 1b       	sub	r26, r26
    124a:	bb 1b       	sub	r27, r27
    124c:	51 e1       	ldi	r21, 0x11	; 17
    124e:	07 c0       	rjmp	.+14     	; 0x125e <__udivmodhi4_ep>

00001250 <__udivmodhi4_loop>:
    1250:	aa 1f       	adc	r26, r26
    1252:	bb 1f       	adc	r27, r27
    1254:	a6 17       	cp	r26, r22
    1256:	b7 07       	cpc	r27, r23
    1258:	10 f0       	brcs	.+4      	; 0x125e <__udivmodhi4_ep>
    125a:	a6 1b       	sub	r26, r22
    125c:	b7 0b       	sbc	r27, r23

0000125e <__udivmodhi4_ep>:
    125e:	88 1f       	adc	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	5a 95       	dec	r21
    1264:	a9 f7       	brne	.-22     	; 0x1250 <__udivmodhi4_loop>
    1266:	80 95       	com	r24
    1268:	90 95       	com	r25
    126a:	bc 01       	movw	r22, r24
    126c:	cd 01       	movw	r24, r26
    126e:	08 95       	ret

00001270 <do_rand>:
    1270:	8f 92       	push	r8
    1272:	9f 92       	push	r9
    1274:	af 92       	push	r10
    1276:	bf 92       	push	r11
    1278:	cf 92       	push	r12
    127a:	df 92       	push	r13
    127c:	ef 92       	push	r14
    127e:	ff 92       	push	r15
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	ec 01       	movw	r28, r24
    1286:	68 81       	ld	r22, Y
    1288:	79 81       	ldd	r23, Y+1	; 0x01
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	9b 81       	ldd	r25, Y+3	; 0x03
    128e:	61 15       	cp	r22, r1
    1290:	71 05       	cpc	r23, r1
    1292:	81 05       	cpc	r24, r1
    1294:	91 05       	cpc	r25, r1
    1296:	21 f4       	brne	.+8      	; 0x12a0 <do_rand+0x30>
    1298:	64 e2       	ldi	r22, 0x24	; 36
    129a:	79 ed       	ldi	r23, 0xD9	; 217
    129c:	8b e5       	ldi	r24, 0x5B	; 91
    129e:	97 e0       	ldi	r25, 0x07	; 7
    12a0:	2d e1       	ldi	r18, 0x1D	; 29
    12a2:	33 ef       	ldi	r19, 0xF3	; 243
    12a4:	41 e0       	ldi	r20, 0x01	; 1
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <__divmodsi4>
    12ac:	49 01       	movw	r8, r18
    12ae:	5a 01       	movw	r10, r20
    12b0:	9b 01       	movw	r18, r22
    12b2:	ac 01       	movw	r20, r24
    12b4:	a7 ea       	ldi	r26, 0xA7	; 167
    12b6:	b1 e4       	ldi	r27, 0x41	; 65
    12b8:	0e 94 93 0c 	call	0x1926	; 0x1926 <__muluhisi3>
    12bc:	6b 01       	movw	r12, r22
    12be:	7c 01       	movw	r14, r24
    12c0:	ac ee       	ldi	r26, 0xEC	; 236
    12c2:	b4 ef       	ldi	r27, 0xF4	; 244
    12c4:	a5 01       	movw	r20, r10
    12c6:	94 01       	movw	r18, r8
    12c8:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__mulohisi3>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	8c 0d       	add	r24, r12
    12d2:	9d 1d       	adc	r25, r13
    12d4:	ae 1d       	adc	r26, r14
    12d6:	bf 1d       	adc	r27, r15
    12d8:	b7 ff       	sbrs	r27, 7
    12da:	03 c0       	rjmp	.+6      	; 0x12e2 <do_rand+0x72>
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	a1 09       	sbc	r26, r1
    12e0:	b0 48       	sbci	r27, 0x80	; 128
    12e2:	88 83       	st	Y, r24
    12e4:	99 83       	std	Y+1, r25	; 0x01
    12e6:	aa 83       	std	Y+2, r26	; 0x02
    12e8:	bb 83       	std	Y+3, r27	; 0x03
    12ea:	9f 77       	andi	r25, 0x7F	; 127
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	ff 90       	pop	r15
    12f2:	ef 90       	pop	r14
    12f4:	df 90       	pop	r13
    12f6:	cf 90       	pop	r12
    12f8:	bf 90       	pop	r11
    12fa:	af 90       	pop	r10
    12fc:	9f 90       	pop	r9
    12fe:	8f 90       	pop	r8
    1300:	08 95       	ret

00001302 <rand_r>:
    1302:	0e 94 38 09 	call	0x1270	; 0x1270 <do_rand>
    1306:	08 95       	ret

00001308 <rand>:
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	91 e0       	ldi	r25, 0x01	; 1
    130c:	0e 94 38 09 	call	0x1270	; 0x1270 <do_rand>
    1310:	08 95       	ret

00001312 <srand>:
    1312:	a0 e0       	ldi	r26, 0x00	; 0
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    131a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    131e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1322:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1326:	08 95       	ret

00001328 <printf>:
    1328:	a0 e0       	ldi	r26, 0x00	; 0
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	ea e9       	ldi	r30, 0x9A	; 154
    132e:	f9 e0       	ldi	r31, 0x09	; 9
    1330:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__prologue_saves__+0x20>
    1334:	ae 01       	movw	r20, r28
    1336:	4b 5f       	subi	r20, 0xFB	; 251
    1338:	5f 4f       	sbci	r21, 0xFF	; 255
    133a:	fa 01       	movw	r30, r20
    133c:	61 91       	ld	r22, Z+
    133e:	71 91       	ld	r23, Z+
    1340:	af 01       	movw	r20, r30
    1342:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <__iob+0x2>
    1346:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <__iob+0x3>
    134a:	0e 94 aa 09 	call	0x1354	; 0x1354 <vfprintf>
    134e:	e2 e0       	ldi	r30, 0x02	; 2
    1350:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__epilogue_restores__+0x20>

00001354 <vfprintf>:
    1354:	ab e0       	ldi	r26, 0x0B	; 11
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e0 eb       	ldi	r30, 0xB0	; 176
    135a:	f9 e0       	ldi	r31, 0x09	; 9
    135c:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__prologue_saves__>
    1360:	6c 01       	movw	r12, r24
    1362:	7b 01       	movw	r14, r22
    1364:	8a 01       	movw	r16, r20
    1366:	fc 01       	movw	r30, r24
    1368:	17 82       	std	Z+7, r1	; 0x07
    136a:	16 82       	std	Z+6, r1	; 0x06
    136c:	83 81       	ldd	r24, Z+3	; 0x03
    136e:	81 ff       	sbrs	r24, 1
    1370:	cc c1       	rjmp	.+920    	; 0x170a <vfprintf+0x3b6>
    1372:	ce 01       	movw	r24, r28
    1374:	01 96       	adiw	r24, 0x01	; 1
    1376:	3c 01       	movw	r6, r24
    1378:	f6 01       	movw	r30, r12
    137a:	93 81       	ldd	r25, Z+3	; 0x03
    137c:	f7 01       	movw	r30, r14
    137e:	93 fd       	sbrc	r25, 3
    1380:	85 91       	lpm	r24, Z+
    1382:	93 ff       	sbrs	r25, 3
    1384:	81 91       	ld	r24, Z+
    1386:	7f 01       	movw	r14, r30
    1388:	88 23       	and	r24, r24
    138a:	09 f4       	brne	.+2      	; 0x138e <vfprintf+0x3a>
    138c:	ba c1       	rjmp	.+884    	; 0x1702 <vfprintf+0x3ae>
    138e:	85 32       	cpi	r24, 0x25	; 37
    1390:	39 f4       	brne	.+14     	; 0x13a0 <vfprintf+0x4c>
    1392:	93 fd       	sbrc	r25, 3
    1394:	85 91       	lpm	r24, Z+
    1396:	93 ff       	sbrs	r25, 3
    1398:	81 91       	ld	r24, Z+
    139a:	7f 01       	movw	r14, r30
    139c:	85 32       	cpi	r24, 0x25	; 37
    139e:	29 f4       	brne	.+10     	; 0x13aa <vfprintf+0x56>
    13a0:	b6 01       	movw	r22, r12
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 a1 0b 	call	0x1742	; 0x1742 <fputc>
    13a8:	e7 cf       	rjmp	.-50     	; 0x1378 <vfprintf+0x24>
    13aa:	91 2c       	mov	r9, r1
    13ac:	21 2c       	mov	r2, r1
    13ae:	31 2c       	mov	r3, r1
    13b0:	ff e1       	ldi	r31, 0x1F	; 31
    13b2:	f3 15       	cp	r31, r3
    13b4:	d8 f0       	brcs	.+54     	; 0x13ec <vfprintf+0x98>
    13b6:	8b 32       	cpi	r24, 0x2B	; 43
    13b8:	79 f0       	breq	.+30     	; 0x13d8 <vfprintf+0x84>
    13ba:	38 f4       	brcc	.+14     	; 0x13ca <vfprintf+0x76>
    13bc:	80 32       	cpi	r24, 0x20	; 32
    13be:	79 f0       	breq	.+30     	; 0x13de <vfprintf+0x8a>
    13c0:	83 32       	cpi	r24, 0x23	; 35
    13c2:	a1 f4       	brne	.+40     	; 0x13ec <vfprintf+0x98>
    13c4:	23 2d       	mov	r18, r3
    13c6:	20 61       	ori	r18, 0x10	; 16
    13c8:	1d c0       	rjmp	.+58     	; 0x1404 <vfprintf+0xb0>
    13ca:	8d 32       	cpi	r24, 0x2D	; 45
    13cc:	61 f0       	breq	.+24     	; 0x13e6 <vfprintf+0x92>
    13ce:	80 33       	cpi	r24, 0x30	; 48
    13d0:	69 f4       	brne	.+26     	; 0x13ec <vfprintf+0x98>
    13d2:	23 2d       	mov	r18, r3
    13d4:	21 60       	ori	r18, 0x01	; 1
    13d6:	16 c0       	rjmp	.+44     	; 0x1404 <vfprintf+0xb0>
    13d8:	83 2d       	mov	r24, r3
    13da:	82 60       	ori	r24, 0x02	; 2
    13dc:	38 2e       	mov	r3, r24
    13de:	e3 2d       	mov	r30, r3
    13e0:	e4 60       	ori	r30, 0x04	; 4
    13e2:	3e 2e       	mov	r3, r30
    13e4:	2a c0       	rjmp	.+84     	; 0x143a <vfprintf+0xe6>
    13e6:	f3 2d       	mov	r31, r3
    13e8:	f8 60       	ori	r31, 0x08	; 8
    13ea:	1d c0       	rjmp	.+58     	; 0x1426 <vfprintf+0xd2>
    13ec:	37 fc       	sbrc	r3, 7
    13ee:	2d c0       	rjmp	.+90     	; 0x144a <vfprintf+0xf6>
    13f0:	20 ed       	ldi	r18, 0xD0	; 208
    13f2:	28 0f       	add	r18, r24
    13f4:	2a 30       	cpi	r18, 0x0A	; 10
    13f6:	40 f0       	brcs	.+16     	; 0x1408 <vfprintf+0xb4>
    13f8:	8e 32       	cpi	r24, 0x2E	; 46
    13fa:	b9 f4       	brne	.+46     	; 0x142a <vfprintf+0xd6>
    13fc:	36 fc       	sbrc	r3, 6
    13fe:	81 c1       	rjmp	.+770    	; 0x1702 <vfprintf+0x3ae>
    1400:	23 2d       	mov	r18, r3
    1402:	20 64       	ori	r18, 0x40	; 64
    1404:	32 2e       	mov	r3, r18
    1406:	19 c0       	rjmp	.+50     	; 0x143a <vfprintf+0xe6>
    1408:	36 fe       	sbrs	r3, 6
    140a:	06 c0       	rjmp	.+12     	; 0x1418 <vfprintf+0xc4>
    140c:	8a e0       	ldi	r24, 0x0A	; 10
    140e:	98 9e       	mul	r9, r24
    1410:	20 0d       	add	r18, r0
    1412:	11 24       	eor	r1, r1
    1414:	92 2e       	mov	r9, r18
    1416:	11 c0       	rjmp	.+34     	; 0x143a <vfprintf+0xe6>
    1418:	ea e0       	ldi	r30, 0x0A	; 10
    141a:	2e 9e       	mul	r2, r30
    141c:	20 0d       	add	r18, r0
    141e:	11 24       	eor	r1, r1
    1420:	22 2e       	mov	r2, r18
    1422:	f3 2d       	mov	r31, r3
    1424:	f0 62       	ori	r31, 0x20	; 32
    1426:	3f 2e       	mov	r3, r31
    1428:	08 c0       	rjmp	.+16     	; 0x143a <vfprintf+0xe6>
    142a:	8c 36       	cpi	r24, 0x6C	; 108
    142c:	21 f4       	brne	.+8      	; 0x1436 <vfprintf+0xe2>
    142e:	83 2d       	mov	r24, r3
    1430:	80 68       	ori	r24, 0x80	; 128
    1432:	38 2e       	mov	r3, r24
    1434:	02 c0       	rjmp	.+4      	; 0x143a <vfprintf+0xe6>
    1436:	88 36       	cpi	r24, 0x68	; 104
    1438:	41 f4       	brne	.+16     	; 0x144a <vfprintf+0xf6>
    143a:	f7 01       	movw	r30, r14
    143c:	93 fd       	sbrc	r25, 3
    143e:	85 91       	lpm	r24, Z+
    1440:	93 ff       	sbrs	r25, 3
    1442:	81 91       	ld	r24, Z+
    1444:	7f 01       	movw	r14, r30
    1446:	81 11       	cpse	r24, r1
    1448:	b3 cf       	rjmp	.-154    	; 0x13b0 <vfprintf+0x5c>
    144a:	98 2f       	mov	r25, r24
    144c:	9f 7d       	andi	r25, 0xDF	; 223
    144e:	95 54       	subi	r25, 0x45	; 69
    1450:	93 30       	cpi	r25, 0x03	; 3
    1452:	28 f4       	brcc	.+10     	; 0x145e <vfprintf+0x10a>
    1454:	0c 5f       	subi	r16, 0xFC	; 252
    1456:	1f 4f       	sbci	r17, 0xFF	; 255
    1458:	9f e3       	ldi	r25, 0x3F	; 63
    145a:	99 83       	std	Y+1, r25	; 0x01
    145c:	0d c0       	rjmp	.+26     	; 0x1478 <vfprintf+0x124>
    145e:	83 36       	cpi	r24, 0x63	; 99
    1460:	31 f0       	breq	.+12     	; 0x146e <vfprintf+0x11a>
    1462:	83 37       	cpi	r24, 0x73	; 115
    1464:	71 f0       	breq	.+28     	; 0x1482 <vfprintf+0x12e>
    1466:	83 35       	cpi	r24, 0x53	; 83
    1468:	09 f0       	breq	.+2      	; 0x146c <vfprintf+0x118>
    146a:	59 c0       	rjmp	.+178    	; 0x151e <vfprintf+0x1ca>
    146c:	21 c0       	rjmp	.+66     	; 0x14b0 <vfprintf+0x15c>
    146e:	f8 01       	movw	r30, r16
    1470:	80 81       	ld	r24, Z
    1472:	89 83       	std	Y+1, r24	; 0x01
    1474:	0e 5f       	subi	r16, 0xFE	; 254
    1476:	1f 4f       	sbci	r17, 0xFF	; 255
    1478:	88 24       	eor	r8, r8
    147a:	83 94       	inc	r8
    147c:	91 2c       	mov	r9, r1
    147e:	53 01       	movw	r10, r6
    1480:	13 c0       	rjmp	.+38     	; 0x14a8 <vfprintf+0x154>
    1482:	28 01       	movw	r4, r16
    1484:	f2 e0       	ldi	r31, 0x02	; 2
    1486:	4f 0e       	add	r4, r31
    1488:	51 1c       	adc	r5, r1
    148a:	f8 01       	movw	r30, r16
    148c:	a0 80       	ld	r10, Z
    148e:	b1 80       	ldd	r11, Z+1	; 0x01
    1490:	36 fe       	sbrs	r3, 6
    1492:	03 c0       	rjmp	.+6      	; 0x149a <vfprintf+0x146>
    1494:	69 2d       	mov	r22, r9
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	02 c0       	rjmp	.+4      	; 0x149e <vfprintf+0x14a>
    149a:	6f ef       	ldi	r22, 0xFF	; 255
    149c:	7f ef       	ldi	r23, 0xFF	; 255
    149e:	c5 01       	movw	r24, r10
    14a0:	0e 94 96 0b 	call	0x172c	; 0x172c <strnlen>
    14a4:	4c 01       	movw	r8, r24
    14a6:	82 01       	movw	r16, r4
    14a8:	f3 2d       	mov	r31, r3
    14aa:	ff 77       	andi	r31, 0x7F	; 127
    14ac:	3f 2e       	mov	r3, r31
    14ae:	16 c0       	rjmp	.+44     	; 0x14dc <vfprintf+0x188>
    14b0:	28 01       	movw	r4, r16
    14b2:	22 e0       	ldi	r18, 0x02	; 2
    14b4:	42 0e       	add	r4, r18
    14b6:	51 1c       	adc	r5, r1
    14b8:	f8 01       	movw	r30, r16
    14ba:	a0 80       	ld	r10, Z
    14bc:	b1 80       	ldd	r11, Z+1	; 0x01
    14be:	36 fe       	sbrs	r3, 6
    14c0:	03 c0       	rjmp	.+6      	; 0x14c8 <vfprintf+0x174>
    14c2:	69 2d       	mov	r22, r9
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <vfprintf+0x178>
    14c8:	6f ef       	ldi	r22, 0xFF	; 255
    14ca:	7f ef       	ldi	r23, 0xFF	; 255
    14cc:	c5 01       	movw	r24, r10
    14ce:	0e 94 8b 0b 	call	0x1716	; 0x1716 <strnlen_P>
    14d2:	4c 01       	movw	r8, r24
    14d4:	f3 2d       	mov	r31, r3
    14d6:	f0 68       	ori	r31, 0x80	; 128
    14d8:	3f 2e       	mov	r3, r31
    14da:	82 01       	movw	r16, r4
    14dc:	33 fc       	sbrc	r3, 3
    14de:	1b c0       	rjmp	.+54     	; 0x1516 <vfprintf+0x1c2>
    14e0:	82 2d       	mov	r24, r2
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	88 16       	cp	r8, r24
    14e6:	99 06       	cpc	r9, r25
    14e8:	b0 f4       	brcc	.+44     	; 0x1516 <vfprintf+0x1c2>
    14ea:	b6 01       	movw	r22, r12
    14ec:	80 e2       	ldi	r24, 0x20	; 32
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <fputc>
    14f4:	2a 94       	dec	r2
    14f6:	f4 cf       	rjmp	.-24     	; 0x14e0 <vfprintf+0x18c>
    14f8:	f5 01       	movw	r30, r10
    14fa:	37 fc       	sbrc	r3, 7
    14fc:	85 91       	lpm	r24, Z+
    14fe:	37 fe       	sbrs	r3, 7
    1500:	81 91       	ld	r24, Z+
    1502:	5f 01       	movw	r10, r30
    1504:	b6 01       	movw	r22, r12
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	0e 94 a1 0b 	call	0x1742	; 0x1742 <fputc>
    150c:	21 10       	cpse	r2, r1
    150e:	2a 94       	dec	r2
    1510:	21 e0       	ldi	r18, 0x01	; 1
    1512:	82 1a       	sub	r8, r18
    1514:	91 08       	sbc	r9, r1
    1516:	81 14       	cp	r8, r1
    1518:	91 04       	cpc	r9, r1
    151a:	71 f7       	brne	.-36     	; 0x14f8 <vfprintf+0x1a4>
    151c:	e8 c0       	rjmp	.+464    	; 0x16ee <vfprintf+0x39a>
    151e:	84 36       	cpi	r24, 0x64	; 100
    1520:	11 f0       	breq	.+4      	; 0x1526 <vfprintf+0x1d2>
    1522:	89 36       	cpi	r24, 0x69	; 105
    1524:	41 f5       	brne	.+80     	; 0x1576 <vfprintf+0x222>
    1526:	f8 01       	movw	r30, r16
    1528:	37 fe       	sbrs	r3, 7
    152a:	07 c0       	rjmp	.+14     	; 0x153a <vfprintf+0x1e6>
    152c:	60 81       	ld	r22, Z
    152e:	71 81       	ldd	r23, Z+1	; 0x01
    1530:	82 81       	ldd	r24, Z+2	; 0x02
    1532:	93 81       	ldd	r25, Z+3	; 0x03
    1534:	0c 5f       	subi	r16, 0xFC	; 252
    1536:	1f 4f       	sbci	r17, 0xFF	; 255
    1538:	08 c0       	rjmp	.+16     	; 0x154a <vfprintf+0x1f6>
    153a:	60 81       	ld	r22, Z
    153c:	71 81       	ldd	r23, Z+1	; 0x01
    153e:	07 2e       	mov	r0, r23
    1540:	00 0c       	add	r0, r0
    1542:	88 0b       	sbc	r24, r24
    1544:	99 0b       	sbc	r25, r25
    1546:	0e 5f       	subi	r16, 0xFE	; 254
    1548:	1f 4f       	sbci	r17, 0xFF	; 255
    154a:	f3 2d       	mov	r31, r3
    154c:	ff 76       	andi	r31, 0x6F	; 111
    154e:	3f 2e       	mov	r3, r31
    1550:	97 ff       	sbrs	r25, 7
    1552:	09 c0       	rjmp	.+18     	; 0x1566 <vfprintf+0x212>
    1554:	90 95       	com	r25
    1556:	80 95       	com	r24
    1558:	70 95       	com	r23
    155a:	61 95       	neg	r22
    155c:	7f 4f       	sbci	r23, 0xFF	; 255
    155e:	8f 4f       	sbci	r24, 0xFF	; 255
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	f0 68       	ori	r31, 0x80	; 128
    1564:	3f 2e       	mov	r3, r31
    1566:	2a e0       	ldi	r18, 0x0A	; 10
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	a3 01       	movw	r20, r6
    156c:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__ultoa_invert>
    1570:	88 2e       	mov	r8, r24
    1572:	86 18       	sub	r8, r6
    1574:	45 c0       	rjmp	.+138    	; 0x1600 <vfprintf+0x2ac>
    1576:	85 37       	cpi	r24, 0x75	; 117
    1578:	31 f4       	brne	.+12     	; 0x1586 <vfprintf+0x232>
    157a:	23 2d       	mov	r18, r3
    157c:	2f 7e       	andi	r18, 0xEF	; 239
    157e:	b2 2e       	mov	r11, r18
    1580:	2a e0       	ldi	r18, 0x0A	; 10
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	25 c0       	rjmp	.+74     	; 0x15d0 <vfprintf+0x27c>
    1586:	93 2d       	mov	r25, r3
    1588:	99 7f       	andi	r25, 0xF9	; 249
    158a:	b9 2e       	mov	r11, r25
    158c:	8f 36       	cpi	r24, 0x6F	; 111
    158e:	c1 f0       	breq	.+48     	; 0x15c0 <vfprintf+0x26c>
    1590:	18 f4       	brcc	.+6      	; 0x1598 <vfprintf+0x244>
    1592:	88 35       	cpi	r24, 0x58	; 88
    1594:	79 f0       	breq	.+30     	; 0x15b4 <vfprintf+0x260>
    1596:	b5 c0       	rjmp	.+362    	; 0x1702 <vfprintf+0x3ae>
    1598:	80 37       	cpi	r24, 0x70	; 112
    159a:	19 f0       	breq	.+6      	; 0x15a2 <vfprintf+0x24e>
    159c:	88 37       	cpi	r24, 0x78	; 120
    159e:	21 f0       	breq	.+8      	; 0x15a8 <vfprintf+0x254>
    15a0:	b0 c0       	rjmp	.+352    	; 0x1702 <vfprintf+0x3ae>
    15a2:	e9 2f       	mov	r30, r25
    15a4:	e0 61       	ori	r30, 0x10	; 16
    15a6:	be 2e       	mov	r11, r30
    15a8:	b4 fe       	sbrs	r11, 4
    15aa:	0d c0       	rjmp	.+26     	; 0x15c6 <vfprintf+0x272>
    15ac:	fb 2d       	mov	r31, r11
    15ae:	f4 60       	ori	r31, 0x04	; 4
    15b0:	bf 2e       	mov	r11, r31
    15b2:	09 c0       	rjmp	.+18     	; 0x15c6 <vfprintf+0x272>
    15b4:	34 fe       	sbrs	r3, 4
    15b6:	0a c0       	rjmp	.+20     	; 0x15cc <vfprintf+0x278>
    15b8:	29 2f       	mov	r18, r25
    15ba:	26 60       	ori	r18, 0x06	; 6
    15bc:	b2 2e       	mov	r11, r18
    15be:	06 c0       	rjmp	.+12     	; 0x15cc <vfprintf+0x278>
    15c0:	28 e0       	ldi	r18, 0x08	; 8
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	05 c0       	rjmp	.+10     	; 0x15d0 <vfprintf+0x27c>
    15c6:	20 e1       	ldi	r18, 0x10	; 16
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <vfprintf+0x27c>
    15cc:	20 e1       	ldi	r18, 0x10	; 16
    15ce:	32 e0       	ldi	r19, 0x02	; 2
    15d0:	f8 01       	movw	r30, r16
    15d2:	b7 fe       	sbrs	r11, 7
    15d4:	07 c0       	rjmp	.+14     	; 0x15e4 <vfprintf+0x290>
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	0c 5f       	subi	r16, 0xFC	; 252
    15e0:	1f 4f       	sbci	r17, 0xFF	; 255
    15e2:	06 c0       	rjmp	.+12     	; 0x15f0 <vfprintf+0x29c>
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0e 5f       	subi	r16, 0xFE	; 254
    15ee:	1f 4f       	sbci	r17, 0xFF	; 255
    15f0:	a3 01       	movw	r20, r6
    15f2:	0e 94 dd 0b 	call	0x17ba	; 0x17ba <__ultoa_invert>
    15f6:	88 2e       	mov	r8, r24
    15f8:	86 18       	sub	r8, r6
    15fa:	fb 2d       	mov	r31, r11
    15fc:	ff 77       	andi	r31, 0x7F	; 127
    15fe:	3f 2e       	mov	r3, r31
    1600:	36 fe       	sbrs	r3, 6
    1602:	0d c0       	rjmp	.+26     	; 0x161e <vfprintf+0x2ca>
    1604:	23 2d       	mov	r18, r3
    1606:	2e 7f       	andi	r18, 0xFE	; 254
    1608:	a2 2e       	mov	r10, r18
    160a:	89 14       	cp	r8, r9
    160c:	58 f4       	brcc	.+22     	; 0x1624 <vfprintf+0x2d0>
    160e:	34 fe       	sbrs	r3, 4
    1610:	0b c0       	rjmp	.+22     	; 0x1628 <vfprintf+0x2d4>
    1612:	32 fc       	sbrc	r3, 2
    1614:	09 c0       	rjmp	.+18     	; 0x1628 <vfprintf+0x2d4>
    1616:	83 2d       	mov	r24, r3
    1618:	8e 7e       	andi	r24, 0xEE	; 238
    161a:	a8 2e       	mov	r10, r24
    161c:	05 c0       	rjmp	.+10     	; 0x1628 <vfprintf+0x2d4>
    161e:	b8 2c       	mov	r11, r8
    1620:	a3 2c       	mov	r10, r3
    1622:	03 c0       	rjmp	.+6      	; 0x162a <vfprintf+0x2d6>
    1624:	b8 2c       	mov	r11, r8
    1626:	01 c0       	rjmp	.+2      	; 0x162a <vfprintf+0x2d6>
    1628:	b9 2c       	mov	r11, r9
    162a:	a4 fe       	sbrs	r10, 4
    162c:	0f c0       	rjmp	.+30     	; 0x164c <vfprintf+0x2f8>
    162e:	fe 01       	movw	r30, r28
    1630:	e8 0d       	add	r30, r8
    1632:	f1 1d       	adc	r31, r1
    1634:	80 81       	ld	r24, Z
    1636:	80 33       	cpi	r24, 0x30	; 48
    1638:	21 f4       	brne	.+8      	; 0x1642 <vfprintf+0x2ee>
    163a:	9a 2d       	mov	r25, r10
    163c:	99 7e       	andi	r25, 0xE9	; 233
    163e:	a9 2e       	mov	r10, r25
    1640:	09 c0       	rjmp	.+18     	; 0x1654 <vfprintf+0x300>
    1642:	a2 fe       	sbrs	r10, 2
    1644:	06 c0       	rjmp	.+12     	; 0x1652 <vfprintf+0x2fe>
    1646:	b3 94       	inc	r11
    1648:	b3 94       	inc	r11
    164a:	04 c0       	rjmp	.+8      	; 0x1654 <vfprintf+0x300>
    164c:	8a 2d       	mov	r24, r10
    164e:	86 78       	andi	r24, 0x86	; 134
    1650:	09 f0       	breq	.+2      	; 0x1654 <vfprintf+0x300>
    1652:	b3 94       	inc	r11
    1654:	a3 fc       	sbrc	r10, 3
    1656:	11 c0       	rjmp	.+34     	; 0x167a <vfprintf+0x326>
    1658:	a0 fe       	sbrs	r10, 0
    165a:	06 c0       	rjmp	.+12     	; 0x1668 <vfprintf+0x314>
    165c:	b2 14       	cp	r11, r2
    165e:	88 f4       	brcc	.+34     	; 0x1682 <vfprintf+0x32e>
    1660:	28 0c       	add	r2, r8
    1662:	92 2c       	mov	r9, r2
    1664:	9b 18       	sub	r9, r11
    1666:	0e c0       	rjmp	.+28     	; 0x1684 <vfprintf+0x330>
    1668:	b2 14       	cp	r11, r2
    166a:	60 f4       	brcc	.+24     	; 0x1684 <vfprintf+0x330>
    166c:	b6 01       	movw	r22, r12
    166e:	80 e2       	ldi	r24, 0x20	; 32
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	0e 94 a1 0b 	call	0x1742	; 0x1742 <fputc>
    1676:	b3 94       	inc	r11
    1678:	f7 cf       	rjmp	.-18     	; 0x1668 <vfprintf+0x314>
    167a:	b2 14       	cp	r11, r2
    167c:	18 f4       	brcc	.+6      	; 0x1684 <vfprintf+0x330>
    167e:	2b 18       	sub	r2, r11
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <vfprintf+0x332>
    1682:	98 2c       	mov	r9, r8
    1684:	21 2c       	mov	r2, r1
    1686:	a4 fe       	sbrs	r10, 4
    1688:	10 c0       	rjmp	.+32     	; 0x16aa <vfprintf+0x356>
    168a:	b6 01       	movw	r22, r12
    168c:	80 e3       	ldi	r24, 0x30	; 48
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	0e 94 a1 0b 	call	0x1742	; 0x1742 <fputc>
    1694:	a2 fe       	sbrs	r10, 2
    1696:	17 c0       	rjmp	.+46     	; 0x16c6 <vfprintf+0x372>
    1698:	a1 fc       	sbrc	r10, 1
    169a:	03 c0       	rjmp	.+6      	; 0x16a2 <vfprintf+0x34e>
    169c:	88 e7       	ldi	r24, 0x78	; 120
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <vfprintf+0x352>
    16a2:	88 e5       	ldi	r24, 0x58	; 88
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	b6 01       	movw	r22, r12
    16a8:	0c c0       	rjmp	.+24     	; 0x16c2 <vfprintf+0x36e>
    16aa:	8a 2d       	mov	r24, r10
    16ac:	86 78       	andi	r24, 0x86	; 134
    16ae:	59 f0       	breq	.+22     	; 0x16c6 <vfprintf+0x372>
    16b0:	a1 fe       	sbrs	r10, 1
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <vfprintf+0x364>
    16b4:	8b e2       	ldi	r24, 0x2B	; 43
    16b6:	01 c0       	rjmp	.+2      	; 0x16ba <vfprintf+0x366>
    16b8:	80 e2       	ldi	r24, 0x20	; 32
    16ba:	a7 fc       	sbrc	r10, 7
    16bc:	8d e2       	ldi	r24, 0x2D	; 45
    16be:	b6 01       	movw	r22, r12
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e 94 a1 0b 	call	0x1742	; 0x1742 <fputc>
    16c6:	89 14       	cp	r8, r9
    16c8:	38 f4       	brcc	.+14     	; 0x16d8 <vfprintf+0x384>
    16ca:	b6 01       	movw	r22, r12
    16cc:	80 e3       	ldi	r24, 0x30	; 48
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	0e 94 a1 0b 	call	0x1742	; 0x1742 <fputc>
    16d4:	9a 94       	dec	r9
    16d6:	f7 cf       	rjmp	.-18     	; 0x16c6 <vfprintf+0x372>
    16d8:	8a 94       	dec	r8
    16da:	f3 01       	movw	r30, r6
    16dc:	e8 0d       	add	r30, r8
    16de:	f1 1d       	adc	r31, r1
    16e0:	80 81       	ld	r24, Z
    16e2:	b6 01       	movw	r22, r12
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	0e 94 a1 0b 	call	0x1742	; 0x1742 <fputc>
    16ea:	81 10       	cpse	r8, r1
    16ec:	f5 cf       	rjmp	.-22     	; 0x16d8 <vfprintf+0x384>
    16ee:	22 20       	and	r2, r2
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <vfprintf+0x3a0>
    16f2:	42 ce       	rjmp	.-892    	; 0x1378 <vfprintf+0x24>
    16f4:	b6 01       	movw	r22, r12
    16f6:	80 e2       	ldi	r24, 0x20	; 32
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	0e 94 a1 0b 	call	0x1742	; 0x1742 <fputc>
    16fe:	2a 94       	dec	r2
    1700:	f6 cf       	rjmp	.-20     	; 0x16ee <vfprintf+0x39a>
    1702:	f6 01       	movw	r30, r12
    1704:	86 81       	ldd	r24, Z+6	; 0x06
    1706:	97 81       	ldd	r25, Z+7	; 0x07
    1708:	02 c0       	rjmp	.+4      	; 0x170e <vfprintf+0x3ba>
    170a:	8f ef       	ldi	r24, 0xFF	; 255
    170c:	9f ef       	ldi	r25, 0xFF	; 255
    170e:	2b 96       	adiw	r28, 0x0b	; 11
    1710:	e2 e1       	ldi	r30, 0x12	; 18
    1712:	0c 94 c2 0c 	jmp	0x1984	; 0x1984 <__epilogue_restores__>

00001716 <strnlen_P>:
    1716:	fc 01       	movw	r30, r24
    1718:	05 90       	lpm	r0, Z+
    171a:	61 50       	subi	r22, 0x01	; 1
    171c:	70 40       	sbci	r23, 0x00	; 0
    171e:	01 10       	cpse	r0, r1
    1720:	d8 f7       	brcc	.-10     	; 0x1718 <strnlen_P+0x2>
    1722:	80 95       	com	r24
    1724:	90 95       	com	r25
    1726:	8e 0f       	add	r24, r30
    1728:	9f 1f       	adc	r25, r31
    172a:	08 95       	ret

0000172c <strnlen>:
    172c:	fc 01       	movw	r30, r24
    172e:	61 50       	subi	r22, 0x01	; 1
    1730:	70 40       	sbci	r23, 0x00	; 0
    1732:	01 90       	ld	r0, Z+
    1734:	01 10       	cpse	r0, r1
    1736:	d8 f7       	brcc	.-10     	; 0x172e <strnlen+0x2>
    1738:	80 95       	com	r24
    173a:	90 95       	com	r25
    173c:	8e 0f       	add	r24, r30
    173e:	9f 1f       	adc	r25, r31
    1740:	08 95       	ret

00001742 <fputc>:
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	fb 01       	movw	r30, r22
    174c:	23 81       	ldd	r18, Z+3	; 0x03
    174e:	21 fd       	sbrc	r18, 1
    1750:	03 c0       	rjmp	.+6      	; 0x1758 <fputc+0x16>
    1752:	8f ef       	ldi	r24, 0xFF	; 255
    1754:	9f ef       	ldi	r25, 0xFF	; 255
    1756:	2c c0       	rjmp	.+88     	; 0x17b0 <fputc+0x6e>
    1758:	22 ff       	sbrs	r18, 2
    175a:	16 c0       	rjmp	.+44     	; 0x1788 <fputc+0x46>
    175c:	46 81       	ldd	r20, Z+6	; 0x06
    175e:	57 81       	ldd	r21, Z+7	; 0x07
    1760:	24 81       	ldd	r18, Z+4	; 0x04
    1762:	35 81       	ldd	r19, Z+5	; 0x05
    1764:	42 17       	cp	r20, r18
    1766:	53 07       	cpc	r21, r19
    1768:	44 f4       	brge	.+16     	; 0x177a <fputc+0x38>
    176a:	a0 81       	ld	r26, Z
    176c:	b1 81       	ldd	r27, Z+1	; 0x01
    176e:	9d 01       	movw	r18, r26
    1770:	2f 5f       	subi	r18, 0xFF	; 255
    1772:	3f 4f       	sbci	r19, 0xFF	; 255
    1774:	31 83       	std	Z+1, r19	; 0x01
    1776:	20 83       	st	Z, r18
    1778:	8c 93       	st	X, r24
    177a:	26 81       	ldd	r18, Z+6	; 0x06
    177c:	37 81       	ldd	r19, Z+7	; 0x07
    177e:	2f 5f       	subi	r18, 0xFF	; 255
    1780:	3f 4f       	sbci	r19, 0xFF	; 255
    1782:	37 83       	std	Z+7, r19	; 0x07
    1784:	26 83       	std	Z+6, r18	; 0x06
    1786:	14 c0       	rjmp	.+40     	; 0x17b0 <fputc+0x6e>
    1788:	8b 01       	movw	r16, r22
    178a:	ec 01       	movw	r28, r24
    178c:	fb 01       	movw	r30, r22
    178e:	00 84       	ldd	r0, Z+8	; 0x08
    1790:	f1 85       	ldd	r31, Z+9	; 0x09
    1792:	e0 2d       	mov	r30, r0
    1794:	09 95       	icall
    1796:	89 2b       	or	r24, r25
    1798:	e1 f6       	brne	.-72     	; 0x1752 <fputc+0x10>
    179a:	d8 01       	movw	r26, r16
    179c:	16 96       	adiw	r26, 0x06	; 6
    179e:	8d 91       	ld	r24, X+
    17a0:	9c 91       	ld	r25, X
    17a2:	17 97       	sbiw	r26, 0x07	; 7
    17a4:	01 96       	adiw	r24, 0x01	; 1
    17a6:	17 96       	adiw	r26, 0x07	; 7
    17a8:	9c 93       	st	X, r25
    17aa:	8e 93       	st	-X, r24
    17ac:	16 97       	sbiw	r26, 0x06	; 6
    17ae:	ce 01       	movw	r24, r28
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	1f 91       	pop	r17
    17b6:	0f 91       	pop	r16
    17b8:	08 95       	ret

000017ba <__ultoa_invert>:
    17ba:	fa 01       	movw	r30, r20
    17bc:	aa 27       	eor	r26, r26
    17be:	28 30       	cpi	r18, 0x08	; 8
    17c0:	51 f1       	breq	.+84     	; 0x1816 <__ultoa_invert+0x5c>
    17c2:	20 31       	cpi	r18, 0x10	; 16
    17c4:	81 f1       	breq	.+96     	; 0x1826 <__ultoa_invert+0x6c>
    17c6:	e8 94       	clt
    17c8:	6f 93       	push	r22
    17ca:	6e 7f       	andi	r22, 0xFE	; 254
    17cc:	6e 5f       	subi	r22, 0xFE	; 254
    17ce:	7f 4f       	sbci	r23, 0xFF	; 255
    17d0:	8f 4f       	sbci	r24, 0xFF	; 255
    17d2:	9f 4f       	sbci	r25, 0xFF	; 255
    17d4:	af 4f       	sbci	r26, 0xFF	; 255
    17d6:	b1 e0       	ldi	r27, 0x01	; 1
    17d8:	3e d0       	rcall	.+124    	; 0x1856 <__ultoa_invert+0x9c>
    17da:	b4 e0       	ldi	r27, 0x04	; 4
    17dc:	3c d0       	rcall	.+120    	; 0x1856 <__ultoa_invert+0x9c>
    17de:	67 0f       	add	r22, r23
    17e0:	78 1f       	adc	r23, r24
    17e2:	89 1f       	adc	r24, r25
    17e4:	9a 1f       	adc	r25, r26
    17e6:	a1 1d       	adc	r26, r1
    17e8:	68 0f       	add	r22, r24
    17ea:	79 1f       	adc	r23, r25
    17ec:	8a 1f       	adc	r24, r26
    17ee:	91 1d       	adc	r25, r1
    17f0:	a1 1d       	adc	r26, r1
    17f2:	6a 0f       	add	r22, r26
    17f4:	71 1d       	adc	r23, r1
    17f6:	81 1d       	adc	r24, r1
    17f8:	91 1d       	adc	r25, r1
    17fa:	a1 1d       	adc	r26, r1
    17fc:	20 d0       	rcall	.+64     	; 0x183e <__ultoa_invert+0x84>
    17fe:	09 f4       	brne	.+2      	; 0x1802 <__ultoa_invert+0x48>
    1800:	68 94       	set
    1802:	3f 91       	pop	r19
    1804:	2a e0       	ldi	r18, 0x0A	; 10
    1806:	26 9f       	mul	r18, r22
    1808:	11 24       	eor	r1, r1
    180a:	30 19       	sub	r19, r0
    180c:	30 5d       	subi	r19, 0xD0	; 208
    180e:	31 93       	st	Z+, r19
    1810:	de f6       	brtc	.-74     	; 0x17c8 <__ultoa_invert+0xe>
    1812:	cf 01       	movw	r24, r30
    1814:	08 95       	ret
    1816:	46 2f       	mov	r20, r22
    1818:	47 70       	andi	r20, 0x07	; 7
    181a:	40 5d       	subi	r20, 0xD0	; 208
    181c:	41 93       	st	Z+, r20
    181e:	b3 e0       	ldi	r27, 0x03	; 3
    1820:	0f d0       	rcall	.+30     	; 0x1840 <__ultoa_invert+0x86>
    1822:	c9 f7       	brne	.-14     	; 0x1816 <__ultoa_invert+0x5c>
    1824:	f6 cf       	rjmp	.-20     	; 0x1812 <__ultoa_invert+0x58>
    1826:	46 2f       	mov	r20, r22
    1828:	4f 70       	andi	r20, 0x0F	; 15
    182a:	40 5d       	subi	r20, 0xD0	; 208
    182c:	4a 33       	cpi	r20, 0x3A	; 58
    182e:	18 f0       	brcs	.+6      	; 0x1836 <__ultoa_invert+0x7c>
    1830:	49 5d       	subi	r20, 0xD9	; 217
    1832:	31 fd       	sbrc	r19, 1
    1834:	40 52       	subi	r20, 0x20	; 32
    1836:	41 93       	st	Z+, r20
    1838:	02 d0       	rcall	.+4      	; 0x183e <__ultoa_invert+0x84>
    183a:	a9 f7       	brne	.-22     	; 0x1826 <__ultoa_invert+0x6c>
    183c:	ea cf       	rjmp	.-44     	; 0x1812 <__ultoa_invert+0x58>
    183e:	b4 e0       	ldi	r27, 0x04	; 4
    1840:	a6 95       	lsr	r26
    1842:	97 95       	ror	r25
    1844:	87 95       	ror	r24
    1846:	77 95       	ror	r23
    1848:	67 95       	ror	r22
    184a:	ba 95       	dec	r27
    184c:	c9 f7       	brne	.-14     	; 0x1840 <__ultoa_invert+0x86>
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	61 05       	cpc	r22, r1
    1852:	71 05       	cpc	r23, r1
    1854:	08 95       	ret
    1856:	9b 01       	movw	r18, r22
    1858:	ac 01       	movw	r20, r24
    185a:	0a 2e       	mov	r0, r26
    185c:	06 94       	lsr	r0
    185e:	57 95       	ror	r21
    1860:	47 95       	ror	r20
    1862:	37 95       	ror	r19
    1864:	27 95       	ror	r18
    1866:	ba 95       	dec	r27
    1868:	c9 f7       	brne	.-14     	; 0x185c <__ultoa_invert+0xa2>
    186a:	62 0f       	add	r22, r18
    186c:	73 1f       	adc	r23, r19
    186e:	84 1f       	adc	r24, r20
    1870:	95 1f       	adc	r25, r21
    1872:	a0 1d       	adc	r26, r0
    1874:	08 95       	ret

00001876 <eeprom_read_byte>:
    1876:	f9 99       	sbic	0x1f, 1	; 31
    1878:	fe cf       	rjmp	.-4      	; 0x1876 <eeprom_read_byte>
    187a:	92 bd       	out	0x22, r25	; 34
    187c:	81 bd       	out	0x21, r24	; 33
    187e:	f8 9a       	sbi	0x1f, 0	; 31
    1880:	99 27       	eor	r25, r25
    1882:	80 b5       	in	r24, 0x20	; 32
    1884:	08 95       	ret

00001886 <eeprom_read_dword>:
    1886:	a6 e1       	ldi	r26, 0x16	; 22
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	44 e0       	ldi	r20, 0x04	; 4
    188c:	50 e0       	ldi	r21, 0x00	; 0
    188e:	0c 94 58 0c 	jmp	0x18b0	; 0x18b0 <eeprom_read_blraw>

00001892 <eeprom_write_dword>:
    1892:	24 2f       	mov	r18, r20
    1894:	0e 94 67 0c 	call	0x18ce	; 0x18ce <eeprom_write_r18>
    1898:	25 2f       	mov	r18, r21
    189a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <eeprom_write_r18>
    189e:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <eeprom_write_word>

000018a2 <eeprom_write_word>:
    18a2:	0e 94 66 0c 	call	0x18cc	; 0x18cc <eeprom_write_byte>
    18a6:	27 2f       	mov	r18, r23
    18a8:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <eeprom_write_r18>

000018ac <eeprom_read_block>:
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22

000018b0 <eeprom_read_blraw>:
    18b0:	fc 01       	movw	r30, r24
    18b2:	f9 99       	sbic	0x1f, 1	; 31
    18b4:	fe cf       	rjmp	.-4      	; 0x18b2 <eeprom_read_blraw+0x2>
    18b6:	06 c0       	rjmp	.+12     	; 0x18c4 <eeprom_read_blraw+0x14>
    18b8:	f2 bd       	out	0x22, r31	; 34
    18ba:	e1 bd       	out	0x21, r30	; 33
    18bc:	f8 9a       	sbi	0x1f, 0	; 31
    18be:	31 96       	adiw	r30, 0x01	; 1
    18c0:	00 b4       	in	r0, 0x20	; 32
    18c2:	0d 92       	st	X+, r0
    18c4:	41 50       	subi	r20, 0x01	; 1
    18c6:	50 40       	sbci	r21, 0x00	; 0
    18c8:	b8 f7       	brcc	.-18     	; 0x18b8 <eeprom_read_blraw+0x8>
    18ca:	08 95       	ret

000018cc <eeprom_write_byte>:
    18cc:	26 2f       	mov	r18, r22

000018ce <eeprom_write_r18>:
    18ce:	f9 99       	sbic	0x1f, 1	; 31
    18d0:	fe cf       	rjmp	.-4      	; 0x18ce <eeprom_write_r18>
    18d2:	1f ba       	out	0x1f, r1	; 31
    18d4:	92 bd       	out	0x22, r25	; 34
    18d6:	81 bd       	out	0x21, r24	; 33
    18d8:	20 bd       	out	0x20, r18	; 32
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	fa 9a       	sbi	0x1f, 2	; 31
    18e0:	f9 9a       	sbi	0x1f, 1	; 31
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	08 95       	ret

000018e8 <__divmodsi4>:
    18e8:	05 2e       	mov	r0, r21
    18ea:	97 fb       	bst	r25, 7
    18ec:	1e f4       	brtc	.+6      	; 0x18f4 <__divmodsi4+0xc>
    18ee:	00 94       	com	r0
    18f0:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__negsi2>
    18f4:	57 fd       	sbrc	r21, 7
    18f6:	07 d0       	rcall	.+14     	; 0x1906 <__divmodsi4_neg2>
    18f8:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__udivmodsi4>
    18fc:	07 fc       	sbrc	r0, 7
    18fe:	03 d0       	rcall	.+6      	; 0x1906 <__divmodsi4_neg2>
    1900:	4e f4       	brtc	.+18     	; 0x1914 <__divmodsi4_exit>
    1902:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__negsi2>

00001906 <__divmodsi4_neg2>:
    1906:	50 95       	com	r21
    1908:	40 95       	com	r20
    190a:	30 95       	com	r19
    190c:	21 95       	neg	r18
    190e:	3f 4f       	sbci	r19, 0xFF	; 255
    1910:	4f 4f       	sbci	r20, 0xFF	; 255
    1912:	5f 4f       	sbci	r21, 0xFF	; 255

00001914 <__divmodsi4_exit>:
    1914:	08 95       	ret

00001916 <__negsi2>:
    1916:	90 95       	com	r25
    1918:	80 95       	com	r24
    191a:	70 95       	com	r23
    191c:	61 95       	neg	r22
    191e:	7f 4f       	sbci	r23, 0xFF	; 255
    1920:	8f 4f       	sbci	r24, 0xFF	; 255
    1922:	9f 4f       	sbci	r25, 0xFF	; 255
    1924:	08 95       	ret

00001926 <__muluhisi3>:
    1926:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__umulhisi3>
    192a:	a5 9f       	mul	r26, r21
    192c:	90 0d       	add	r25, r0
    192e:	b4 9f       	mul	r27, r20
    1930:	90 0d       	add	r25, r0
    1932:	a4 9f       	mul	r26, r20
    1934:	80 0d       	add	r24, r0
    1936:	91 1d       	adc	r25, r1
    1938:	11 24       	eor	r1, r1
    193a:	08 95       	ret

0000193c <__mulshisi3>:
    193c:	b7 ff       	sbrs	r27, 7
    193e:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__muluhisi3>

00001942 <__mulohisi3>:
    1942:	0e 94 93 0c 	call	0x1926	; 0x1926 <__muluhisi3>
    1946:	82 1b       	sub	r24, r18
    1948:	93 0b       	sbc	r25, r19
    194a:	08 95       	ret

0000194c <__prologue_saves__>:
    194c:	2f 92       	push	r2
    194e:	3f 92       	push	r3
    1950:	4f 92       	push	r4
    1952:	5f 92       	push	r5
    1954:	6f 92       	push	r6
    1956:	7f 92       	push	r7
    1958:	8f 92       	push	r8
    195a:	9f 92       	push	r9
    195c:	af 92       	push	r10
    195e:	bf 92       	push	r11
    1960:	cf 92       	push	r12
    1962:	df 92       	push	r13
    1964:	ef 92       	push	r14
    1966:	ff 92       	push	r15
    1968:	0f 93       	push	r16
    196a:	1f 93       	push	r17
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	ca 1b       	sub	r28, r26
    1976:	db 0b       	sbc	r29, r27
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	f8 94       	cli
    197c:	de bf       	out	0x3e, r29	; 62
    197e:	0f be       	out	0x3f, r0	; 63
    1980:	cd bf       	out	0x3d, r28	; 61
    1982:	09 94       	ijmp

00001984 <__epilogue_restores__>:
    1984:	2a 88       	ldd	r2, Y+18	; 0x12
    1986:	39 88       	ldd	r3, Y+17	; 0x11
    1988:	48 88       	ldd	r4, Y+16	; 0x10
    198a:	5f 84       	ldd	r5, Y+15	; 0x0f
    198c:	6e 84       	ldd	r6, Y+14	; 0x0e
    198e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1990:	8c 84       	ldd	r8, Y+12	; 0x0c
    1992:	9b 84       	ldd	r9, Y+11	; 0x0b
    1994:	aa 84       	ldd	r10, Y+10	; 0x0a
    1996:	b9 84       	ldd	r11, Y+9	; 0x09
    1998:	c8 84       	ldd	r12, Y+8	; 0x08
    199a:	df 80       	ldd	r13, Y+7	; 0x07
    199c:	ee 80       	ldd	r14, Y+6	; 0x06
    199e:	fd 80       	ldd	r15, Y+5	; 0x05
    19a0:	0c 81       	ldd	r16, Y+4	; 0x04
    19a2:	1b 81       	ldd	r17, Y+3	; 0x03
    19a4:	aa 81       	ldd	r26, Y+2	; 0x02
    19a6:	b9 81       	ldd	r27, Y+1	; 0x01
    19a8:	ce 0f       	add	r28, r30
    19aa:	d1 1d       	adc	r29, r1
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	ed 01       	movw	r28, r26
    19b8:	08 95       	ret

000019ba <__umulhisi3>:
    19ba:	a2 9f       	mul	r26, r18
    19bc:	b0 01       	movw	r22, r0
    19be:	b3 9f       	mul	r27, r19
    19c0:	c0 01       	movw	r24, r0
    19c2:	a3 9f       	mul	r26, r19
    19c4:	70 0d       	add	r23, r0
    19c6:	81 1d       	adc	r24, r1
    19c8:	11 24       	eor	r1, r1
    19ca:	91 1d       	adc	r25, r1
    19cc:	b2 9f       	mul	r27, r18
    19ce:	70 0d       	add	r23, r0
    19d0:	81 1d       	adc	r24, r1
    19d2:	11 24       	eor	r1, r1
    19d4:	91 1d       	adc	r25, r1
    19d6:	08 95       	ret

000019d8 <_exit>:
    19d8:	f8 94       	cli

000019da <__stop_program>:
    19da:	ff cf       	rjmp	.-2      	; 0x19da <__stop_program>
